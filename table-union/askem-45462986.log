+ python simclr/synthetic_data_gen.py
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
/scratch/yl6624/ARPA/askem-arpa-h-project/table-union/simclr/synthetic_data_gen.py:54: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[alternative_name] = list_of_values
protein_purity_ratio
['1.85', '1.9', '1.95', '2.00', '2.05', '2.10', '1.80', '1.75', '2.15', '2.20', '1.70', '1.65', '2.25', '1.60', '2.30']
mutation_code
['BRAF_V600E', 'KRAS_G12D', 'EGFR_T790M', 'EGFR_L858R', 'PIK3CA_E545K', 'TP53_R175H', 'TP53_Y220C', 'KIT_D816V', 'KIT_D816V', 'EGFR_C797S', 'AKT1_E17K', 'TP53_R249S', 'CHEK2_N345K', 'KRAS_G13C', 'CDKN2A_P13L']
seq_quality_status
['Failure', 'NR', 'Successful', 'NA', 'Warning']
sequencing_library_adapters
['Illumina_Adapter', 'Nextera_Adapter', 'TruSeq_Adapter', 'SOLiD_Sequence_Adapter', 'Ion_Adapter', 'P5_Index_Adapter', 'P7_Index_Adapter', 'MiSeq_Sequence_Adapter', 'HiSeq_Adapter', 'NovaSeq_Adapter', 'SMRTbell_Adapter', 'Nanopore_Adapter', '454_Sequence_Adapter', 'MegaRAP_Adapter', 'SureSelect_Adapter']
adapter_seq
['P7_adapter', 'P5_adapter', 'Index_adapter', 'Universal_adapter', 'Multiplexing_adapter', 'Sequencing_adapter', 'Library_adapter', 'PCR_adapter', 'Illumina_adapter', 'Nextera_adapter', 'TruSeq_adapter', 'Custom_adapter', 'Dual_index_adapter', 'Single_index_adapter']
additional_findings
['Ferruginous_bodies', 'Endometriosis_with_adhesions', 'Hematopoietic_tissue_concordance', 'C_diff_infection', 'Diabetic_nephropathy', 'High_grade_dysplasia', 'Glandular_hyperplasia', 'CIS_with_keratinizing_dysplasia', 'Complex_EVM_Patterns', 'Chemoresistant', 'High_grade_dysplasia', 'C_diff_infection', 'Diabetic_nephropathy', 'High_grade_dysplasia', 'High_grade_dysplasia']
adrenal_gland_function
['Absent', 'NR', 'Present', 'Absent', 'NR', 'NR', 'Present', 'Absent', 'Present', 'NR', 'NR', 'NR', 'NR', 'Present', 'Absent']
side_effects
['Loose Stools', 'Xeroderma', 'Peptic Ulcer', 'Myasthenia', 'Hearing Loss', 'Tubal Hemorrhage', 'Papilledema', 'Alopecia', 'Dermatologic Disorders', 'Testicular Hemorrhage', 'Loose Stools', 'Dermatologic Disorders', 'Xeroderma', 'Dermatologic Disorders', 'Myasthenia']
toxicity_grade
['G1', 'G2', 'G3', 'G4', 'G5']
age_at_dx_days
['20_years', '40_years', '22_years', '60_years', '70_years', '50_years', '80_years', '18_years', '26_years', '35_years', '65_years', '80_years', '90_years', '100_years']
Processed 10 columns
age_at_diagnosis
['infant', 'toddler', 'preteen', 'adult', 'young_adult', 'thirties', 'early_forties', 'late_forties', 'early_fifties', 'late_fifties', 'early_sixties', 'retirement_age', 'late_seventies', 'mid_eighties']
last_age_exposure
['adolescent', 'young_adult', 'adult', 'middle_aged', 'senior', 'elderly']
age_of_diagnosis
['pediatric', 'adolescent', 'young_adult', 'adult', 'midlife', 'mature_adult', 'late_adult', 'early_senior', 'senior', 'elderly', 'advanced_age', 'late_life', 'octogenarian', 'nonagenarian']
age_privacy_masked
['1', '0', 'Y', 'N', 'Yes', 'No']
oncogene_variants
['TP53_variants', 'KRAS_variants', 'APC_variants', 'EGFR_variants', 'BRAF_variants', 'PIK3CA_variants', 'PTEN_variants', 'CDKN2A_variants', 'RB1_variants', 'ALK_variants', 'ERBB2_amplifications', 'MET_amplifications', 'VHL_variants', 'NF1_variants', 'IDH1_variants']
HIV_associated_conditions
['Valley_fever', 'Filobasidiella', 'Crypto', 'CMI', 'CMV_disease', 'HIV_related_encephalopathy', 'Cystoisosporiasis', 'M_avium_complex', 'Unspecified', 'Salmonellosis', 'Toxo', 'HIV_wasting', 'HIV_cachexia', 'CMV_retinitis', 'Not_otherwise_specified']
clinical_metastasis_stage
['M0', 'M1', 'M1a', 'M1b', 'M1c', 'MX', 'Data_Not_Collected', 'Not_Reported', 'Unknown', 'cM0_i_plus', 'M1', 'Unknown', 'M1', 'M1b', 'Unknown']
clinical_n_stage
['N0i_plus', 'N0_mol_neg', 'N1', 'N1a', 'N1b', 'N1b1', 'N1b4', 'N1c', 'N3c', 'NX', 'N1b4', 'N1a', 'N1b4']
clinical_stage_group
['Stage_0', 'Stage_IA2', 'Stage_IB2', 'Stage_IIA', 'Stage_III', 'Stage_IIIA', 'Stage_IIIC', 'Stage_IV', 'Stage_IVB', 'Stage_X']
clinical_t_stage
['T1b', 'T2a', 'T2b', 'T4', 'T4a', 'T4b', 'Ta', 'DCIS_Tis', 'LCIS_Tis', 'Pagets_Tis', 'DCIS_Tis', 'T1b', 'Ta', 'DCIS_Tis', 'T1b']
Processed 20 columns
pathologic_m_stage
['M0', 'M1a', 'M1b', 'M1c', 'M2', 'MX', 'NA', 'NR', 'U', 'cM0i_plus', 'M1c']
ajcc_pn_stage
['N0_mol_neg', 'N1a', 'N1b', 'N1b_II', 'N1b_III', 'N1b_IV', 'N1c', 'N2b', 'N3a', 'N4', 'N3a', 'N1c', 'N1c', 'N1b_II']
pathologic_tnm_stage
['NR', 'Tis_N0_M0', 'T1a_N0_M0', 'T1c_N0_M0', 'T2a_N0_M0', 'T2b_N0_M0', 'T3_N0_M0', 'T3a_N0_M0', 'T4b_N0_M0', 'T4c_N0_M0', 'NR', 'T3_N0_M0', 'Tis_N0_M0', 'NR', 'NR']
tumor_stage_tnm
['T1', 'T1bII', 'T1mic', 'T2', 'T2aI', 'T3a', 'T3b', 'T4c', 'TX', 'Tis_DCIS', 'Tis_DCIS', 'TX', 'TX', 'T2aI', 'T2']
ajcc_version
['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'NR', 'UNK', 'II', 'VI', 'VII', 'III', 'VII']
alcohol_consumption_days_weekly
['zero_days', 'one_day', 'two_days', 'three_days', 'four_days', 'five_days', 'six_days', 'seven_days', 'half_day', 'one_and_half_days', 'two_and_half_days', 'three_and_half_days', 'four_and_half_days', 'five_and_half_days', 'six_and_half_days']
daily_alcohol_intake_units
['none', 'light', 'moderate', 'heavy', 'very_heavy']
alcohol_consumption_frequency
['Daily', 'Weekly', 'Monthly', 'Yearly']
alcohol_use_history
['No', 'NR', 'U', 'Yes']
alcohol_consumption_category
['Regular_Drinker', 'Frequent_Drinker', 'Abstainer', 'Never_Drinker', 'Data_Not_Provided', 'Infrequent_Drinker', 'Casual_Drinker', 'Not_Known', 'Teetotaler', 'Sobriety']
Processed 30 columns
alcohol_consumption_type
['Beer', 'Spirits', 'NR', 'Miscellaneous', 'Unknown', 'Vinous_Alcohol', 'Spirits', 'Spirits', 'Miscellaneous', 'Vinous_Alcohol', 'Spirits', 'Spirits', 'Spirits']
sequencing_data_files
['tumor_sample_01_sequence.bam', 'healthy_sample_01_sequence.bam', 'patientA_tumor_replicate1.bam', 'patientA_healthy_replicate1.bam', 'sample02_tumor_seq.bam', 'sample02_healthy_seq.bam', 'patientB_tumor_rep2.bam', 'patientB_healthy_rep2.bam', 'primary_tumor_03_sequence.bam', 'metastatic_sample_03_sequence.bam', 'healthy_control_04_sequence.bam', 'cancer_sample_05_sequence.bam', 'lymph_node_cancer_06_sequence.bam', 'patientC_tumor_replicate3.bam', 'patientC_healthy_replicate3.bam']
read_alignment_indices
['S1_23456', 'S2_78901', 'S3_34567', 'S4_89012', 'S5_45678', 'S6_90123', 'S7_56789', 'S8_01234', 'S9_67890', 'S10_12345', 'S11_23489', 'S12_34501', 'S13_45612', 'S14_56723', 'S15_67834']
genomic_data_preprocessing_steps
['Align_Optimization', 'Species_Contaminant_Cleaning', 'PCR_Artifact_Minimization', 'Quality_Score_Filtering', 'Read_Deduplication', 'Adapter_Trimming', 'Complexity_Filtering', 'Chimera_Detection', 'Ribosomal_RNA_Removal', 'mtDNA_Removal', 'Viral_Integration_Mapping', 'Hypermutation_Adjustment', 'SV_Adjustment', 'SNV_Standardization', 'Indel_Alignment_Adjustment']
sequencing_alignment_tools
['Burrows-Wheeler_Align', 'Bowtie_2', 'Spliced_Transcripts_Alignment_to_a_Reference', 'Hierarchical_Indexing_for_Spliced_Alignment_of_Transcripts', 'Novocraft', 'Genome_Analysis_Toolkit', 'Top_Hat2', 'Short_Oligonucleotide_Analysis_Package', 'Mapping_and_Assembly_with_Qualities', 'Comprehensive_Read_Architecture_Classification', 'CLC_Genome_Workbench', 'Primer_Annotation_Genome_Improvement_Toolkit', 'Small_Fast_Aligner', 'Velvet_Assembler', 'MUltiple_Sequence_Comparison_by_Log-Expectation']
sample_volume_ml
['0.05', '0.1', '0.15', '0.2', '0.25', '0.3', '0.35', '0.4', '0.45', '0.5', '0.55', '0.6', '0.65', '0.7', '0.75']
sample_volume_ul
['50ul', '100ul', '150ul', '200ul', '250ul', '300ul', '350ul', '400ul', '450ul', '500ul', '550ul', '600ul', '650ul', '700ul', '750ul']
sample_types
['Frozen_tumor_biopsy', 'FFPE_tumor_biopsy', 'Plasma', 'Serum', 'PBMCs', 'Bone_marrow', 'Urine', 'Saliva', 'CSF', 'Pleural_effusion', 'Ascitic_fluid', 'Frozen_lymph_node_biopsy', 'FFPE_lymph_node_biopsy', 'Fecal_matter', 'FNA']
dose_mg
['0.5mg', '1.2mg', '2.5mg', '5mg', '10mg', '20mg', '50mg', '75mg', '100mg', '150mg', '200mg', '250mg', '300mg', '400mg', '500mg']
study_data_files
['gene_expr_summary.csv', 'mutational_burden_analysis.xlsx', 'patient_info.json', 'treatment_outcomes.xml', 'survival_stats.h5', 'RNA_sequencing_counts.tsv', 'epigenetic_dna_methylation_profiles.parquet', 'proteomics_data.dat', 'clinical_study_notes.pdf', 'radiology_images_data.zip', 'drug_response_data.sql', 'pathology_images_annotations.pickle', 'scRNAseq_cluster_data.csv', 'radiomics_analysis.xls', 'immune_seq.fasta']
Processed 40 columns
conc_level
['2.5ng/mL', '4.0ng/mL', '1.2ng/mL', '0.8ng/mL', '3.6ng/mL', '5.1ng/mL', '0.5ng/mL', '2.0ng/mL', '4.5ng/mL', '1.8ng/mL', '3.2ng/mL', '6.0ng/mL', '0.3ng/mL', '5.5ng/mL', '7.2ng/mL']
sample_type
['Deoxyribonucleic_Acid', 'Epstein-Barr_Virus_Immortalized_Normal', 'Formalin-Fixed_Paraffin-Embedded_DNA', 'Formalin-Fixed_Paraffin-Embedded_RNA', 'WGA_DNA', 'Ribonucleic_Acid', 'Multiple_Displacement_Amplification_DNA', 'MDA_Pooled_DNA', 'MDA_X_DNA', 'N6-Methyladenosine_Enriched_RNA']
biomarker_type
['DNA', 'RNA', 'Protein', 'Hormone', 'Receptor', 'Steroid', 'WBC', 'Xenobiotic', 'Yeast', 'WBC', 'DNA', 'DNA', 'Receptor', 'Receptor']
sample_vol_ul
['50ul', '100ul', '150ul', '200ul', '250ul', '300ul', '350ul', '400ul', '450ul', '500ul', '550ul', '600ul', '650ul', '700ul', '750ul']
biomarkers
['BRCA1_gene', 'BRCA2_gene', 'Prostate_Specific_Antigen', 'Cancer_Antigen_125', 'Alpha-Fetoprotein', 'Carcinoembryonic_Antigen', 'ERBB2', 'Programmed_Death-Ligand_1', 'Philadelphia_chromosome', 'Epidermal_Growth_Factor_Receptor', 'Kirsten_Rat_Sarcoma_Viral_Oncogene', 'Anaplastic_Lymphoma_Kinase', 'PD-L1', 'Lactate_Dehydrogenase', 'Carbohydrate_Antigen_19-9']
anaplasia_status
['Absent', 'NR', 'U', 'Present']
anaplasia_status
['None', 'Generalized', 'Indeterminate', 'Localized', 'NR', 'Positive', 'Fibrosis', 'NA', 'Positive', 'Localized', 'Localized', 'Generalized', 'Generalized', 'Generalized']
chromosome_aberration_type
['Monosomy_X', 'Triple_X', 'XXY', 'XO', 'XXX', 'Klinefelter_syndrome']
b_symptoms_presence
['Absent', 'Data_Not_Collected', 'NR', 'Unknown', 'Present', 'NR', 'NR', 'NR', 'NR', 'NR', 'Present', 'NR', 'NR', 'NR', 'NR']
ann_arbor_B_symptoms
['Pyrexia', 'Diaphoresis_nocturnal', 'Additional_symptoms', 'Weight_reduction']
Processed 50 columns
TNM_stage
['NR', 'I', 'II', 'III', 'IV', 'U', 'IV', 'NR', 'IV', 'IV', 'III', 'IV', 'IV', 'III', 'III']
ann_arbor_extra_nodal
['No', 'Data_Not_Collected', 'NR', 'Unknown', 'Yes']
clinical_stage
['Not_Available', 'I', 'II', 'III', 'IV', 'Unknown', 'III', 'I', 'IV', 'Not_Available', 'III', 'IV', 'I', 'III', 'II']
somatic_mutation_annotations
['G12D_KRAS', 'R175H_TP53', 'V600E_BRAF', 'E545K_PIK3CA', 'L858R_EGFR', 'T102*_PTEN', 'R876*_APC', 'E1202K_ALK', 'S310F_ERBB2', 'Q61R_NRAS', 'R132H_IDH1', 'W110*_CDKN2A', 'D1228N_MET', 'FLT3_internal_tandem_duplications', 'W288fs_NPM1']
cell_marker
['CD14_Monocyte_Differentiation_Antigen', 'CD15_Lewis_X', 'CD20_B-Lymphocyte_Antigen', 'CD33_Sialic_Acid_Binding_Ig-like_Lectin_3', 'CD45_Leukocyte_Common_Antigen', 'CD5_T-Cell_Surface_Glycoprotein_CD5', 'CD56_NCAM', 'CD7_T-Cell_Antigen', 'Immunoglobulin_Heavy_Chain', 'Cytoplasmic_Ig', 'Kappa_Light_Chain', 'Surface_Ig', 'CD45_PTPRC', 'CD33_SIGLEC3', 'CD7_T-Cell_Surface_Marker']
genomic_databases
['TCGA', 'GDC', 'Oncomine', 'CCLE', 'ICGC', 'SRA', 'EGA', 'dbGaP', 'PDB', 'HPA', 'cBioPortal', 'GDAC_Firehose', 'NCI_GDC', 'COSMIC', 'TARGET']
asbestos_history
['Absent', 'NR', 'U', 'Present']
asbestos_fiber_type
['Grunerite', 'Riebeckite', 'Grunerite', 'Grunerite', 'Riebeckite', 'Riebeckite', 'Riebeckite', 'Riebeckite', 'Grunerite', 'Grunerite', 'Riebeckite', 'Grunerite', 'Grunerite', 'Grunerite', 'Grunerite']
avg_base_qual
['thirty-five point two', 'twenty-eight point seven', 'thirty point four', 'twenty-two point five', 'thirty-seven point nine', 'twenty-five point three', 'forty point one', 'thirty-two point six', 'twenty-seven point eight', 'thirty-four point five', 'twenty-nine point nine', 'thirty-one point two', 'thirty-eight point four', 'twenty-four point one', 'thirty-three point seven']
avg_ins_size
['150bp', '200bp', '250bp', '300bp', '350bp', '400bp', '450bp', '500bp', '550bp', '600bp', '650bp', '700bp', '750bp', '800bp', '850bp']
Processed 60 columns
seq_read_len_avg
['75bp', '100bp', '125bp', '150bp', '175bp', '200bp', '225bp', '250bp', '275bp', '300bp', '325bp', '350bp', '375bp', '400bp', '425bp']
genomic_data_reviewed
['Yes', 'No', '0', '1']
be_goblet_cells_detected
['Absent', 'NR', 'NA', 'Present']
variant_calling_tool
['Illumina_BSP', 'GATK_HC', 'Google_DeepVariant', 'ONT_Guppy', 'IonTorrent_Suite', 'PacBio_SMRTAnalysis', 'bcftools', 'Freebayes', 'Strelka', 'lofreq', 'GATK_Mutect2', 'VarScan2', 'NVIDIA_Parabricks', 'Somatic_Sniper', 'Platypus_variant_caller']
sequencing_software_version
['Guppy_v4.0.11', 'Albacore_v2.3.4', 'Bonito_v0.3.6', 'Guppy_v5.0.7', 'Albacore_v2.1.10', 'Bonito_v0.4.0', 'Guppy_v3.2.10', 'Albacore_v1.2.1', 'Bonito_v0.2.5', 'Guppy_v4.2.2', 'Albacore_v2.2.7', 'Bonito_v0.1.3', 'Guppy_v3.1.5', 'Albacore_v1.0.0', 'Bonito_v0.3.1']
quality_control_status
['Failure', 'NR', 'Successful', 'NA', 'Warning']
batch_number
['B101', 'B202', 'B303', 'B404', 'B505', 'B606', 'B707', 'B808', 'B909', 'B1010', 'B1111', 'B1212', 'B1313', 'B1414', 'B1515']
biorepository_code
['AB01', 'CD02', 'EF03', 'GH04', 'IJ05', 'KL06', 'MN07', 'OP08', 'QR09', 'ST10', 'UV11', 'WX12', 'YZ13', 'XY14', 'ZA15']
treatment_response_outcome
['AJ-Adj_Therapy', 'IPD-Immune_Progression', 'MR-Min_Response', 'Non-CR_Non-PD', 'PPD-Pseudo_Progression', 'PR-Part_Response', 'PSR-Pseudo_Response', 'RD-Resp_Disease', 'SD-Stab_Disease', 'TE-Early_Evaluation']
sample_anatomic_location
['Dorsum', 'Cholangio', 'Vesica Urinaria', 'Caecum', 'Diaphragma', 'Gaster Fundus', 'Humeri', 'Nodi Lymphoidei Supraclaviculares', 'Sinus Paranasales', 'Orchis', 'Gaster Fundus', 'Nodi Lymphoidei Supraclaviculares', 'Orchis', 'Vesica Urinaria', 'Dorsum']
Processed 70 columns
specimen_side
['Bilat', 'L', 'NR', 'R', 'Unk']
cell_culture_additives
['FBS', 'Collagenase Type IV', 'Trypsin-EDTA Solution', 'Pen-Strep', 'L-Gln', 'HEPES', 'NaPyruvate', 'NEAA', 'ITS Supplement', 'B27', 'N2', 'HSA', 'Dimethyl Sulfoxide', 'Y-27632', 'Hydrocortisone Hemisuccinate']
sample_type
['Marrow', 'Oral_Mucosa', 'Amniotic_Fluid', 'Neutrophil', 'NR', 'Ascites', 'Oral_Fluid', 'Blood_Serum', 'Not_Known', 'Urinary_Output']
sample_volume_ml
['1500ul', '2000ul', '500ul', '3000ul', '4500ul', '1000ul', '2500ul', '750ul', '3500ul', '5000ul', '1250ul', '2750ul', '250ul', '4000ul', '6000ul']
lab_test_ref_range_min
['RBC_min', 'Na_min', 'K_min', 'Hb_min', 'Glu_min', 'Ca_min', 'WBC_min', 'Hct_min', 'Plt_min', 'Bil_min', 'Cl_min', 'Creat_min', 'pH_min', 'O2Sat_min']
lab_test_ref_range_high
['hemoglobin_upper_limit', 'WBC_count_max', 'fasting_glucose_upper', 'blood_pH_max', 'platelet_count_upper', 'serum_cholesterol_high', 'creatinine_serum_upper', 'bilirubin_total_max', 'calcium_serum_high', 'hemoglobin_A1c_upper', 'neutrophil_count_max', 'lymphocyte_count_upper', 'albumin_serum_max', 'eosinophil_count_high']
body_mass_index
['underweight', 'normal_weight', 'overweight', 'obese_class_1', 'obese_class_2', 'obese_class_3', 'overweight', 'obese_class_1', 'obese_class_2', 'obese_class_2', 'obese_class_3', 'obese_class_3', 'obese_class_3', 'normal_weight', 'overweight']
bsa_m2
['1.52_m2', '1.63_m2', '1.74_m2', '1.85_m2', '1.95_m2', '2.06_m2', '2.17_m2', '2.28_m2', '2.39_m2', '2.5_m2', '2.61_m2', '2.72_m2', '2.83_m2', '2.94_m2', '3.05_m2']
bone_marrow_blasts_presence
['Absent', 'NR', 'U', 'Present', 'NR', 'Present', 'NR', 'Present', 'Absent', 'NR', 'Present', 'Present', 'Present', 'Present', 'NR']
tumor_thickness_mm
['0.5_mm', '0.8_mm', '1.0_mm', '1.2_mm', '1.5_mm', '2.0_mm', '2.3_mm', '2.5_mm', '3.0_mm', '3.5_mm', '4.0_mm', '4.5_mm', '5.0_mm', '5.5_mm', '6.0_mm']
Processed 80 columns
burkitt_lymphoma_subtype
['Endemic_BL', 'ID-associated_BL_adult', 'ID-associated_BL_pediatric', 'NA', 'NR', 'Sporadic_BL_adult', 'Sporadic_BL_pediatric', 'Unknown_BL_adult', 'Sporadic_BL_general']
cancer_diagnosis_method
['Not_Reported', 'Early_Detection', 'Monitoring', 'Clinical_Presentation', 'Monitoring', 'Early_Detection', 'Monitoring', 'Monitoring', 'Early_Detection', 'Monitoring', 'Monitoring', 'Early_Detection', 'Early_Detection', 'Monitoring', 'Monitoring']
cancer_types
['Mammary_carcinoma', 'Pulmonary_carcinoma', 'Prostatic_carcinoma', 'Colorectal_neoplasia', 'Cutaneous_melanoma', 'Leukaemia', 'Lymphatic_cancer', 'Urothelial_carcinoma', 'Pancreatic_neoplasia', 'Renal_cancer', 'Thyroid_neoplasia', 'Hepatic_cancer', 'Cervix_carcinoma', 'Oesophageal_cancer']
model_id
['HCM1_123', 'HCM1_456', 'HCM1_789', 'HCM1_1011', 'HCM1_1314', 'HCM1_1617', 'HCM1_1920', 'HCM1_2223', 'HCM1_2526', 'HCM1_2829', 'HCM1_3132', 'HCM1_3435', 'HCM1_3738', 'HCM1_4041', 'HCM1_4344']
sample_issue_type
['BCR_Notif', 'Specimen_ID_unknown', 'QC_Failure', 'Insufficient_Clinical_Data', 'General_Issue', 'Prior_Treatment_Issue', 'Incorrect_Shipment', 'Incorrect_Normal_Tissue_Origin', 'Metrics_Change', 'Tumor_Normal_Appearance', 'Specimen_ID_unknown', 'QC_Failure', 'Metrics_Change', 'QC_Failure', 'QC_Failure']
mortality_cause
['Neoplastic_Causes', 'Cardiovascular_Diseases', 'Not_Otherwise_Specified', 'Chronic_Kidney_Failure', 'Infectious_Diseases', 'Non-Neoplastic_Causes', 'Data_Not_Available', 'Kidney_Diseases', 'Postoperative_Complications', 'Poisoning', 'Cause_Unknown', 'Cause_Unknown', 'Not_Otherwise_Specified']
death_info_source
['Postmortem_Examination', 'Vital_Records', 'Health_Record', 'NR', 'SSDI', 'Unk', 'Postmortem_Examination', 'Vital_Records', 'Vital_Records', 'Unk', 'Health_Record', 'Vital_Records', 'NR', 'Unk']
treatment_outcome_reason
['Genetic_alteration', 'Immune_response', 'Chemo_resistance', 'Radiotherapy_effect', 'Endocrine_therapy_result', 'Molecular_therapy_effect', 'Surgery_effect', 'Natural_regression', 'Infection_reaction', 'Environmental_impact', 'Lifestyle_influence', 'Metabolic_reaction', 'Stress_effect', 'Diet_response', 'Gut_flora_effect']
cd4_cell_count
['four_hundred_fifty', 'five_hundred_sixty', 'three_hundred_twenty', 'seven_hundred_fifty', 'two_hundred_ninety', 'six_hundred_ten', 'four_hundred', 'two_hundred_thirty', 'six_hundred_seventy', 'five_hundred_ten', 'three_hundred_fifty', 'eight_hundred_eighty', 'four_hundred_twenty', 'two_hundred_sixty', 'five_hundred_ninety']
hiv_transmission_categories
['Coagulation_Disorder', 'Heterosexual_Exposure', 'MSM', 'PWID', 'Missing_Data', 'Not_Specified', 'Blood_Product_Recipient', 'Data_Unavailable', 'Coagulation_Disorder', 'Coagulation_Disorder', 'PWID', 'PWID', 'PWID', 'Blood_Product_Recipient', 'Missing_Data']
Processed 90 columns
cell_num
['1K', '5K', '10K', '15K', '20K', '25K', '30K', '35K', '40K', '45K', '50K', '55K', '60K', '65K', '70K']
facility_type
['Comprehensive_Cancer_Centers', 'Basic_Research_Facilities', 'Clinical_Research_Facilities', 'Cancer_Prevention_Facilities', 'Pediatric_Oncology_Centers', 'Community_Oncology_Centers', 'NCI_Designated_Centers', 'Integrated_Oncology_Centers', 'Regional_Oncology_Centers', 'Oncology_Treatment_Centers', 'Molecular_Cancer_Centers', 'Immunotherapy_Cancer_Centers', 'Genomic_Oncology_Centers', 'Radiation_Cancer_Centers', 'Surgical_Cancer_Centers']
treatment_facilities
['MDACC', 'MSKCC', 'JHSKCCC', 'DFCI', 'MCCC', 'CCTCI', 'FHCRC', 'UCSF HDFCCC', 'SCI', 'UCMCC', 'MGHCC', 'NU RHLC', 'UM RCC', 'COHCCC', 'VICC']
fluorescence_channel
['FAM', 'VIC', 'VIC', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'FAM', 'VIC']
carcinogenic_agents
['Chrysotile', 'Benzol', 'Methanal', 'Chloroethene', 'Aroclors', 'Arsenous acid', 'Chromium(VI)', 'Niccolous', 'Cadmium compounds', 'Radon-222', 'Diesel particulate matter', 'Crystalline silica', 'Glucinum', 'Oxirane', 'Propenamide']
concurrent_chemoradiation
['No', 'NR', 'U', 'Yes']
child_pugh_score
['A', 'B', 'C', 'Not_Reported', 'Unknown']
sample_id
['Sample_001', 'Sample_002', 'Sample_003', 'Sample_004', 'Sample_005', 'Sample_006', 'Sample_007', 'Sample_008', 'Sample_009', 'Sample_010', 'Sample_011', 'Sample_012', 'Sample_013', 'Sample_014', 'Sample_015']
well_plate_location
['A01-1', 'B02-5', 'C03-10', 'D04-15', 'E05-20', 'F06-25', 'G07-30', 'H08-35', 'I09-40', 'J10-45', 'K11-50', 'L12-55', 'M13-60', 'N14-65', 'O15-70']
chip_seq_ab
['NA', 'Unknown', 'H3K27ac_antibody_ab4729']
Processed 100 columns
histone_modification
['H3K27acetylation', 'H3K27trimethylation', 'H3K36trimethylation', 'H3K4monomethylation', 'H3K4trimethylation', 'H3K9trimethylation', 'Control', 'NA', 'H3K27trimethylation', 'Control', 'Control', 'H3K9trimethylation', 'Control', 'Control', 'H3K9trimethylation']
genetic_translocations
['Not_Reported', 'NR', 'translocation_10_11_p11.2_q23', 'translocation_11_19_q23_p13.1', 'translocation_3_5_q25_q34', 'translocation_6_11_q27_q23', 'translocation_6_9', 'translocation_8_21', 'translocation_9_11_p22_q23', 'NA']
chrom_loc
['Not_Reported', 'Unknown', '11q', '20q', '22q', 'Xq', '3q', '4q', '8q', '9q']
chrom_arm
['NR', 'short_arm', 'long_arm']
daily_smoking_intensity
['non-smoker', 'occasional_smoker', 'light_smoker', 'moderate_smoker', 'heavy_smoker', 'very_heavy_smoker']
crm_mm
['10mm', '15mm', '20mm', '25mm', '30mm', '35mm', '40mm', '45mm', '50mm', '55mm', '60mm', '65mm', '70mm', '75mm', '80mm']
clark_level_of_invasion
['level_1', 'level_2', 'level_3', 'level_4', 'NR', 'level_5']
data_status
['Block_Release', 'Center_Alert', 'Full_Data_Lock', 'Partial_Data_Lock', 'Alert', 'Monitoring', 'Data_Hiding', 'Partial_Data_Lock', 'Full_Data_Lock', 'Monitoring', 'Center_Alert', 'Monitoring', 'Monitoring', 'Monitoring', 'Monitoring']
tumor_stage_type
['Not_Collected', 'Pre-cancerous', 'Initial_primary', 'Concurrent_primary', 'Not_Specified', 'Secondary', 'Unreported', 'Different_type', 'Initial', 'Relapse', 'Pre-cancerous', 'Concurrent_primary', 'Concurrent_primary', 'Different_type', 'Initial_primary']
nutritional_supplements
['Cholecalciferol', 'Eicosapentaenoic Acid and Docosahexaenoic Acid', 'Live Cultures', 'Curcuma longa', 'Camellia sinensis', 'Selenomethionine', 'Ascorbic Acid', 'Ubiquinone', 'N-acetyl-5-methoxytryptamine', 'Zingiber officinale', 'Zincum metallicum', 'Linseed Oil', 'Fungal Extracts', "Trans-3,5,4'-trihydroxystilbene", 'Magnesium Citrate']
Processed 110 columns
trial_participation_ind
['False', 'NR', 'True', 'F', 'N/A', 'T']
tumor_clonality_status
['Monoclonal', 'Polyclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal', 'Monoclonal']
coal_dust_exp
['Absent', 'Not_Determined', 'Present']
research_area_code
['CRS-23-01', 'ONC-23-02', 'GENO-23-03', 'IMMUN-23-04', 'THERA-23-05', 'DIAGN-23-06', 'PREVE-23-07', 'MOLEC-23-08', 'BIOLO-23-09', 'DATAS-23-10', 'PHARM-23-11', 'CELLU-23-12', 'PATHO-23-13', 'RADIO-23-14', 'SURGI-23-15']
hepatic_cancer_stage
['NR', 'I', 'II', 'III', 'IV', 'U', 'I', 'II', 'III', 'IV', 'NR', 'U', 'U', 'II', 'IV']
neuroblastoma_risk_classification
['High_Risk', 'Intermediate_Risk', 'Low_Risk', 'NR', 'Unknown']
renal_stage_classification
['NR', 'I', 'II', 'III', 'IV', 'U', 'I', 'IV', 'IV', 'IV', 'II', 'IV', 'NR', 'U', 'I']
rhabdomyosarcoma_risk_classification
['high_risk', 'intermediate_risk', 'low_risk', 'not_reported', 'data_not_available']
columnar_epithelium_status
['No', 'Not_Reported', 'Unknown', 'Yes']
coexisting_conditions
['HTN', 'DM', 'CKD', 'CAD', 'COPD', 'HF', 'Overweight', 'Bone_density_loss', 'Low_blood_count', 'Major_depressive_disorder', 'Reactive_airway_disease', 'High_cholesterol', 'Joint_inflammation', 'Cerebrovascular_accident', 'Cognitive_decline']
Processed 120 columns
coexisting_conditions
['Chronic_Pancreatitis', 'Liver_Cirrhosis', 'Idiopathic', 'Drash_Syndrome', 'Diabetic_Neuropathy', 'Cardiovascular_Disease', 'Lymphomatoid_Papulosis', 'Peutz-Jeghers_Syndrome', 'End_Stage_Renal_Disease', 'Sarcoidosis', 'Inflammatory_Bowel_Disease', 'Idiopathic', 'End_Stage_Renal_Disease', 'Inflammatory_Bowel_Disease', 'Chronic_Pancreatitis']
diagnosis_method
['Histopathology', 'NR', 'Pathological_Analysis', 'Imaging', 'Not_Specified']
sample_type
['Two_Dimensional_Classical_CRC', 'Two_Dimensional_Modified_CRC', 'Three_Dimensional_Neurosphere', 'Oral_Mucosa_Cells', 'Negative_Control', 'Cell_Line', 'Peripheral_Blood_Lymphocytes', 'Blood_Plasma', 'Tissue', 'Not_Specified', 'Cell_Line', 'Two_Dimensional_Classical_CRC', 'Negative_Control', 'Negative_Control', 'Two_Dimensional_Classical_CRC']
concentration_mM
['50uM', '100uM', '250uM', '500uM', '750uM', '1mM', '1.5mM', '2mM', '2.5mM', '3mM', '5mM', '10mM', '15mM', '20mM', '25mM']
consent_type_alt
['Exemption', 'Waiver', 'Death_Related', 'Full_Consent']
path_review_status
['N', 'NR', 'Y']
contamination_level
['0.1%', '0.5%', '1%', '1.5%', '2%', '2.5%', '3%', '3.5%', '4%', '4.5%', '5%', '5.5%', '6%', '6.5%', '7%']
sample_contam_pct
['2%', '5%', '10%', '3%', '7%', '15%', '1%', '4%', '6%', '8%', '12%', '9%', '11%', '13%', '14%']
direct_invasion_organs
['Adrenal_Gland', 'Urinary_Bladder', 'Large_Intestine', 'IVC', 'Renal', 'Hepatic', 'NR', 'Small_Intestine', 'Splenic']
cnv_count
['zero_copy', 'monoallelic_deletion', 'normal_diploid', 'gain', 'low_level_amplification', 'high_level_amplification', 'very_high_level_amplification']
Processed 130 columns
CNV_supporting_documents
['CNV_report_pdf', 'segmented_data_xlsx', 'CNV_presentation_ppt', 'QC_CNV_csv', 'read_counts_normalized_txt', 'genotyping_results_CNV_json', 'CNV_ratios_tsv', 'CNV_parameters_yaml', 'annotation_metadata_xml', 'validation_assays_CNV_docx', 'CN_gain_loss_map_svg', 'CNV_histograms_png', 'clinical_annotation_CNV_rtf', 'event_logbook_CNV_odt', 'pathway_analysis_CNV_mdb']
cnv_count
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen']
structural_variant_liftover_methods
['GATK4_CopyNumberVariation', 'BroadGenomics_CGH_Liftover', 'Pindel_SVLiftover', 'CNVnator_Version0.3', 'Manta_StructuralVariant', 'CrossMap_ConversionTool', 'LiftOver_with_minimap2', 'DELLY2_StructuralVariantLiftover', 'BICseq2_Liftover', 'CNVer_GenomeLiftover', 'BreakDancerMax_Liftover', 'GenomeSTRiP_StructuralVariantLiftover', 'LumpySV_Liftover', 'TITAN_CopyNumberAlteration_Liftover', 'Sequenza_CNALiftover']
cnv_segments
['monosomy', 'trisomy', 'pentasomy', 'heptasomy', 'nonasomy', 'undecasomy', 'tridecasomy', 'pentadecasomy', 'heptadecasomy', 'nonadecasomy', 'unicosomy', 'tricosomy', 'pentacosomy', 'heptacosomy', 'nonacosomy']
CNV_detection_methods
['WGS Analysis', 'Targeted DNA Sequencing', 'CGH Analysis', 'SNP Microarray', 'MLPA', 'qPCR', 'dPCR', 'Structural Variant Analysis', 'FISH', 'Single-Cell Genomics', '3C Technology', 'OGM', 'Transcriptome Sequencing', 'Genome Editing Screening', 'CNV Analysis Pipeline']
birth_country
['Antigua_and_Barbuda', 'PRC', 'Denmark', 'Micronesia', 'Guatemala', 'Israel', 'Malaysia', 'Serbia', 'Palestine', 'Sweden']
enrollment_country
['AD', 'AW', 'BZ', 'FR', 'DE', 'GU', 'GT', 'JE', 'KI', 'SA', 'BZ', 'JE', 'GT', 'FR', 'GU']
treatment_cycle_no
['cycle_1', 'cycle_2', 'cycle_3', 'cycle_4', 'cycle_5', 'cycle_6', 'cycle_7', 'cycle_8', 'cycle_9', 'cycle_10', 'cycle_11', 'cycle_12', 'cycle_13', 'cycle_14', 'cycle_15']
record_timestamp
['2023-01-15T14:30Z', '2023-02-20T09:15Z', '2023-03-05T16:45Z', '2023-04-10T11:00Z', '2023-05-25T08:30Z', '2023-06-30T13:20Z', '2023-07-15T17:05Z', '2023-08-20T10:10Z', '2023-09-05T15:50Z', '2023-10-10T12:00Z', '2023-11-25T18:25Z', '2023-12-30T20:00Z', '2024-01-15T07:40Z', '2024-02-20T22:15Z', '2024-03-05T05:55Z']
sample_timestamp
['2021-03-01 00:00:00', '2021-03-02 00:00:00', '2021-03-03 00:00:00', '2021-03-04 00:00:00', '2021-03-05 00:00:00', '2021-03-06 00:00:00', '2021-03-07 00:00:00', '2021-03-08 00:00:00', '2021-03-09 00:00:00', '2021-03-10 00:00:00', '2021-03-11 00:00:00', '2021-03-12 00:00:00', '2021-03-13 00:00:00', '2021-03-14 00:00:00', '2021-03-15 00:00:00']
Processed 140 columns
author
["Susan O'Reilly", 'James P Allison', 'Elizabeth Blackburn', 'Carl June', 'Mary-Claire King', 'Siddhartha Mukherjee', 'Emmanuelle Charpentier', 'Jennifer Doudna', 'Harold Varmus', 'Bert Vogelstein', 'Tony Hunter', 'Dennis Slamon', 'Angela H Brodie', 'Brian Druker', 'Gordon Freeman']
body_weight_kg
['50kg', '120kg', '200kg', '75kg', '90kg', '150kg', '180kg', '220kg', '250kg', '300kg', '350kg', '400kg', '450kg', '500kg', '550kg']
chromosomal_location
['1q21', '3p14', '5q35', '7p22', '9q34', '11p15', '13q14', '15q11', '17p13', '19q13', '2p21', '4q25', '6p22', '8q24', '12p13']
data_type
['Clinical_Data', 'CNV', 'Copy_Number_Var', 'Methylation_Patterns', 'Protein_Expression', 'Seq_Data', 'Raw_Seq_Reads', 'SNV', 'Somatic_SV', 'SV', 'Methylation_Data', 'Raw_Reads', 'NGS_Data', 'SNPs', 'NGS_Reads']
file_type
['Array_Data_Format', 'Bioinformatics_Cancer_Research_table', 'Browser_Extensible_Data_Paired_End', 'Affymetrix_Chip_File', 'Comma_Separated_Values', 'JP2', 'JavaScript_Object_Notation', 'Sequence_Read_Archive_Extensible_Markup_Language', 'Tarball_Gzipped', 'Tagged_Image_File_Format', 'Tarball_Gzipped', 'Tagged_Image_File_Format', 'Browser_Extensible_Data_Paired_End', 'Array_Data_Format', 'Browser_Extensible_Data_Paired_End']
file_types
['Sequence Alignment/Map Format', 'Binary Alignment/Map', 'Variant Call Format', 'Digital Imaging and Communications in Medicine', 'Neuroimaging Informatics Technology Initiative', 'Comma-Separated Values', 'Tab-Separated Values', 'Hierarchical Data Format version 5', 'eXtensible Markup Language', 'JavaScript Object Notation', 'Mutation Annotation Format', 'Sequence Alignment/Map', 'Browser Extensible Data', 'Generic Feature Format', 'Apache Parquet']
cancer_biomarkers
['ER+', 'HER2+', 'TNBC', 'G12C', 'Del19/L858R', 'EML4-ALK', 'BRCA1+', 'BRCA2+', 'PD-L1+', 'MSI-H', 'HNPCC', 'PIK3CA+', 'HPV16/18+', 'FLT3-ITD AML', 'del(17p) CLL']
data_category
['Somatic_Mutation_Summary', 'Sequence_Alignment_Index', 'CNV_Segments', 'Patient_Metadata', 'CN_Levels_By_Gene', 'Transcript_Expression_Quantification', 'Germline_Variants', 'RNA_Splice_Junctions', 'Genomic_Rearrangements', 'Raw_Sequence_Data', 'CN_Levels_By_Gene', 'Patient_Metadata', 'RNA_Splice_Junctions', 'Patient_Metadata']
biomarker_types
['Genome_Seq_Data', 'RNA_Seq_Data', 'Protein_Expression_Data', 'Metabolics_Data', 'DNA_Methylation_Data', 'Patient_Clinical_Data', 'Radiology_Data', 'Histology_Data', 'Drug_Response_Data', 'Immuno_Profile_Data', 'PROs', 'EHRs', 'Enzymatic_Activity_Data', 'Cellular_Morphology_Data', 'Exposomics_Data']
time_to_ae_days
['5d', '12d', '18d', '24d', '31d', '45d', '60d', '75d', '90d', '105d', '120d', '150d', '180d', '210d', '240d']
Processed 150 columns
time_to_response_d
['2_weeks', '4_weeks', '6_weeks', '8_weeks', '10_weeks', '12_weeks', '14_weeks', '16_weeks', '18_weeks', '20_weeks', '22_weeks', '24_weeks', '26_weeks', '28_weeks']
age_at_diagnosis_days
['-9 years', '-18 years', '-12 years', '-20 years', '-40 years', '-8 years', '-14 years', '-48 years', '-6 years', '-22 years', '-27 years', '-32 years', '-28 years', '-34 years', '-18 years']
time_to_sample_collection_days
['D1', 'D3', 'D7', 'D14', 'D21', 'D28', 'D35', 'D42', 'D60', 'D75', 'D90', 'D120', 'D150', 'D180', 'D210']
time_to_comorbidity_days
['baseline', '2_weeks', '1_month', '1.5_months', '2_months', '3_months', '4_months', '5_months', '6_months', '7_months', '8_months', '9_months', '10_months', '11_months', '1_year']
time_to_consent_days
['immediate', 'next_day', 'two_days', 'three_days', 'five_days', 'one_week', 'ten_days', 'two_weeks', 'three_weeks', 'four_weeks', 'five_weeks', 'six_weeks', 'two_months', 'three_months', 'four_months']
survival_days
['DOD_0', 'DOD_45', 'DOD_90', 'DOD_120', 'DOD_150', 'DOD_180', 'DOD_210', 'DOD_240', 'DOD_270', 'DOD_300', 'DOD_330', 'DOD_365', 'DOD_400', 'DOD_435', 'DOD_470']
time_to_diagnosis_days
['0_days', '1_week', '2_weeks', '1_month', '1.5_months', '2_months', '3_months', '4_months', '5_months', '6_months', '7_months', '8_months', '9_months', '10_months', '1_year']
time_to_event_days
['1_week', '2_weeks', '3_weeks', '1_month', '1.5_months', '2_months', '3_months', '4_months', '5_months', '6_months', '7_months', '9_months', '10_months', '12_months']
follow_up_duration_days
['baseline', '1_month', '2_months', '3_months', '6_months', '1_year', '2_years', '3_years', '4_years', '5_years', '6_years', '7_years', '8_years', 'pre_baseline']
time_to_scan_days
['day_1', 'day_3', 'week_1', 'week_2', 'week_3', 'week_5', 'week_6', 'month_2', 'month_2_half', 'month_3', 'month_4', 'month_5', 'month_6', 'month_7']
Processed 160 columns
follow_up_duration_days
['negative_follow_up', '1.5_months', '6_months', '1_year', '2_years', '3_years', '4_years', '6_years', '7_years', '8_years', '9_years', '10_years', '11_years', '12_years']
time_to_disease_status_change
['negative_infinite', 'negative_long_term', 'negative_2_years', 'negative_1_year', 'negative_6_months', 'negative_3_months', 'negative_1_month', 'negative_2_weeks', 'negative_1_week', 'baseline', 'positive_1_week', 'positive_2_weeks', 'positive_1_month', 'positive_3_months', 'positive_6_months', 'positive_1_year', 'positive_2_years', 'positive_long_term', 'positive_infinite']
follow_up_duration_days
['NA', '1.5_months', '3_months', '4_months', '6_months', '7_months', '8_months', '9_months', '1_year', '13_months', '15_months', '16.5_months', '18_months', '20_months', '2_years']
time_to_pathology_report_days
['immediate', 'next_day', '3_days', '5_days', '1_week', '10_days', '2_weeks', '3_weeks', '4_weeks', '5_weeks', '6_weeks', '7_weeks', '8_weeks', '9_weeks', '10_weeks']
time_to_disease_progression
['1.5_months', '2_months', '3_months', '4_months', '5_months', '6_months', '7_months', '8_months', '9_months', '10_months', '11_months', '12_months', '13_months', '14_months', '15_months']
PFS_days
['1.5_months', '2_months', '3_months', '4_months', '5_months', '6_months', '7_months', '8_months', '9_months', '10_months', '11_months', '12_months', '13_months', '14_months', '15_months']
time_to_tumor_recurrence_days
['1.5_months', '3_months', '4_months', '6_months', '7_months', '9_months', '12_months', '13_months', '16_months', '20_months', '24_months', '26_months', '30_months', '33_months', '36_months', '37_months']
time_to_exposure_years
['-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8', '-9', '-10', '-11', '-12', '-13', '-14', '-15']
time_to_sample_collection_days
['immediate', 'next_day', '3_days', '5_days', '1_week', '1.5_weeks', '2_weeks', '3_weeks', '4_weeks', '5_weeks', '6_weeks', '7_weeks', '9_weeks', '10_weeks']
time_to_seq_days
['baseline', 'day_1', 'day_3', 'day_7', 'day_14', 'day_21', 'day_28', 'day_35', 'day_42', 'day_50', 'day_60', 'day_75', 'day_90', 'day_105', 'day_120']
Processed 170 columns
time_to_test_days
['3_days', '1_week', '2_weeks', '3_weeks', '4_weeks', '5_weeks', '6_weeks', '8_weeks', '10_weeks', '12_weeks', '14_weeks', '18_weeks', '20_weeks', '22_weeks']
treatment_duration_days
['4_weeks', '6.5_weeks', '8.6_weeks', '12.9_weeks', '17.1_weeks', '21.4_weeks', '30_weeks', '34.3_weeks', '38.6_weeks', '42.9_weeks', '47.1_weeks', '52_weeks', '57.1_weeks', '62.1_weeks']
time_to_treatment_initiation_days
['0_days', '1_day', '3_days', '1_week', '2_weeks', '3_weeks', '4_weeks', '5_weeks', '6_weeks', '8_weeks', '10_weeks', '12_weeks', '16_weeks', '20_weeks', '24_weeks']
study_accession_id
['PHS000424', 'PHS000425', 'PHS000426', 'PHS000427', 'PHS000428', 'PHS000429', 'PHS000430', 'PHS000431', 'PHS000432', 'PHS000433', 'PHS000434', 'PHS000435', 'PHS000436', 'PHS000437', 'PHS000438']
patient_background
['Age', 'Sex', 'Race_Ethnicity', 'Socioeconomic_Position', 'Residence_Area', 'Relationship_Status', 'Educational_Attainment', 'Work_Status', 'Health_Coverage', 'Cancer_Family_History', 'BMI', 'Tobacco_Use', 'Alcohol_Use', 'Exercise_Frequency', 'Nutrition_Habits']
associated_data_types
['Gene_expression_data.csv', 'CNV_data.csv', 'DNA_methylation_data.csv', 'Proteomics_data.csv', 'Mutations_data.maf', 'Histopathology_images.zip', 'MRI_CT_images.dicom', 'Patient_data.xml', 'Pathology_texts.pdf', 'Patient_outcome_data.csv', 'TCR_seq_data.fasta', 'Single_cell_genomics.h5', 'Drug_response_data.csv', 'Metabonomics_data.csv', 'RNA_seq_data.fasta']
cancer_types
['BCC', 'SCC', 'Melanoma', 'Breast_cancer', 'Prostate_cancer', 'Lung_cancer', 'Colorectal_cancer', 'Ovarian_cancer', 'Pancreatic_cancer', 'Liver_cancer', 'AML', 'CLL', 'GBM', 'RCC', 'Bladder_cancer']
diabetes_medication_type
['Metformin', 'Lifestyle_Modification', 'Exogenous_Insulin', 'DPP-4_Inhibitor', 'NR', 'Oral_Antidiabetic_Agent', 'Antidiabetic', 'SGLT2_Inhibitor', 'TZD', 'UNK', 'NR', 'TZD', 'NR', 'DPP-4_Inhibitor', 'UNK']
cancer_types
['Mammary_carcinoma', 'Pulmonary_carcinoma', 'Prostatic_carcinoma', 'Colorectal_carcinoma', 'Cutaneous_melanoma', 'Leukaemia', 'Lymphatic_cancer', 'Urothelial_carcinoma', 'Ovarian_carcinoma', 'Thyroid_carcinoma', 'Pancreatic_carcinoma', 'Renal_cell_carcinoma', 'Astrocytoma_Grade_IV', 'Cervical_carcinoma', 'Oesophageal_carcinoma']
is_primary_tumor
['1', '0', 'Yes', 'No', 'Y', 'N']
Processed 180 columns
pathological_diagnosis_confirmed
['No', 'Data_Not_Collected', 'NR', 'Unknown', 'Yes']
non_contig_lesion_num
['none', 'single', 'double', 'triple', 'quadruple', 'quintuple', 'sextuple', 'septuple', 'octuple', 'nonuple', 'decuple', 'undecuple', 'duodecuple', 'tredecuple', 'quattuordecuple']
treatment_outcome
['DU-Unchanged', 'Non-CR_Non-PD-Stable Disease', 'NR-Not Reported', 'PR-Partial Remission', 'PSR-Pseudoprogression', 'RD-Responsive', 'RP-Response Achieved', 'TE-Early Evaluation', 'UNK-Unknown', 'WT-Present', 'PR-Partial Remission']
cancer_type
['Mixed_Stromal_Tumors', 'Mucinous_Serous_Neoplasms', 'Fibroma_Related_Tumors', 'Germ_Cell_Tumors', 'Giant_Cell_Neoplasms', 'Leukemia_Unspecified', 'Lipoma_Related_Tumors', 'Mature_B_Cell_Lymphomas', 'Mature_T_NK_Cell_Lymphomas', 'Myxoid_Neoplasms', 'Mature_B_Cell_Lymphomas', 'Mature_T_NK_Cell_Lymphomas']
tumor_margin_distance
['Proximal_<=2cm', 'Remote_>2cm', 'NR', 'NA']
supplier_id
['SUPP-00123CA', 'SUPP-00234BC', 'SUPP-00345LC', 'SUPP-00456MC', 'SUPP-00567PC', 'SUPP-00678GB', 'SUPP-00789SC', 'SUPP-00890OC', 'SUPP-00901CC', 'SUPP-01011BL', 'SUPP-01122ML', 'SUPP-01233TC', 'SUPP-01344RC', 'SUPP-01455EC', 'SUPP-01566HC']
pulmonary_diffusion_capacity_pct
['eighty-five', 'ninety-two', 'seventy-eight', 'sixty-five', 'one hundred three', 'eighty-eight', 'seventy-four', 'one hundred ten', 'ninety-six', 'sixty-seven', 'fifty-nine', 'one hundred twenty', 'eighty-one', 'seventy', 'one hundred five']
publication_id
['nrc2017104', 'ccr-18-2367', 'cell201802065', 'scitranslmed.aaf6853', 's1470-2045(19)30150-5', 'nejmoa1809615', 'jncidjx250', 'cncr30888', 's13045-019-0768-2', 's41591-019-0508-4', 'cd-19-0568', 'ccell202003012', 'jem20191865', 's41388-020-1274-6', 'jci129448']
DE_lymphoma_status
['Absent', 'NR', 'Present', 'Absent', 'Present', 'Absent', 'Absent', 'Absent', 'Absent', 'Absent', 'NR', 'Absent', 'Absent', 'NR', 'Absent']
double_hit_lymph_status
['Negative', 'NR', 'Positive']
Processed 190 columns
treatment_type
['Corticosteroid', 'Cytokine', 'Poly_ADPRibose_Polymerase_inhibitor']
dysplasia_severity
['High_Grade', 'Low_Grade', 'Mild', 'Moderate', 'Absent', 'Not_Reported', 'Severe', 'Unknown']
dysplasia_type_alt
['Epithelial_Dysplasia', 'Esophageal_Columnar_Dysplasia', 'Esophageal_Mucosa_Dysplasia', 'Keratinizing_Dysplasia', 'Nonkeratinizing_Dysplasia', 'NR', 'Other_Dysplasia', 'Unknown_Dysplasia']
ecog_ps
['0_Fully_Active', '1_Restricted_in_Physically_Strenuous_Activity', '2_Ambulatory_and_Capable_of_all_Selfcare_but_Unable_to_Carry_out_Work_Activities', '3_Capable_of_only_Limited_Selfcare', '4_Completely_Disabled', '5_Dead', 'Not_Assessed', 'Data_Missing']
educational_attainment
['Bachelors_Degree', 'Secondary_Education_Completed', 'Unreported', 'Postgraduate_Degree', 'Secondary_Education_Incomplete', 'Some_Postsecondary_Education']
aml_risk_group
['High_Risk', 'Low_Risk', 'Intermediate_Risk', 'NR', 'Not_Specified']
embolization_material
['Gelatin_Sponge', 'Ethiodized_Oil', 'Other_Agents', 'Polyvinyl_Alcohol_Particles', 'Embolic_Coils', 'Microspheres', 'Yttrium-90_Sirspheres', 'Yttrium-90_Theraspheres', 'Polyvinyl_Alcohol_Particles', 'Ethiodized_Oil', 'Ethiodized_Oil', 'Ethiodized_Oil', 'Yttrium-90_Sirspheres', 'Polyvinyl_Alcohol_Particles', 'Ethiodized_Oil']
sequencing_quality_score_format
['Sanger_seq', 'Illumina_v1.5', 'Illumina_v1.8', 'Solexa_seq', 'Illumina_v1.3', 'Illumina_v1.7', 'Phred33', 'Phred64', 'ASCII33', 'ASCII64', 'Illumina_v1.9', 'NextSeq500', 'TwoColor_seq', 'SMRT', 'MinION']
enneking_stage
['High_Grade', 'Low_Grade', 'NR', 'Unknown']
m_stage_classification
['M0', 'NR', 'M1', 'U']
Processed 200 columns
enneking_stage
['Not_Rptd', 'IA', 'IB', 'IIA', 'IIB', 'III', 'Unknown', 'IA', 'IIA', 'III', 'III', 'IA', 'Unknown', 'Unknown', 'IA']
musculoskeletal_tumor_stage
['E2', 'I1', 'NR', 'U']
metastasis_stage
['M0', 'M1']
lymph_node_status
['NX', 'N0', 'N1', 'N2', 'N3']
clinical_stage
['Stage_1', 'Stage_2', 'Stage_3', 'Stage_4']
tumor_stage_tnm
['T1a', 'T1b', 'T2a', 'T2b', 'T3a', 'T3b', 'T4a', 'T4b']
ETS_exposure_status
['Absent', 'Not_reported', 'Present']
epithelial_cell_percentage
['5.2%', '12.7%', '18.9%', '23.5%', '29.0%', '34.4%', '41.8%', '45.3%', '50.0%', '55.6%', '62.1%', '68.3%', '74.9%', '80.5%', '87.2%']
data_integrity_issues
['format_error', 'size_mismatch', 'checksum_failure']
esophageal_dysplasia_severity
['High_Grade_Dysplasia', 'Indeterminate_Dysplasia', 'Low_Grade_Dysplasia', 'No_Dysplasia', 'Not_Reported', 'Unknown']
Processed 210 columns
esophageal_barretts_metaplasia_status
['No', 'NR', 'Unknown', 'Yes']
race_ethnicity
['Unknown', 'Hispanic_Latino', 'Not_Collected', 'Not_Hispanic_Latino', 'Not_Reported']
progression_evidence_type
['Imaging_Evidence', 'Pathological_Confirmation', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Pathological_Confirmation', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence', 'Imaging_Evidence']
recurrence_confirmation_type
['Biopsy_Histologic_Confirmation', 'Imaging_Evidence', 'Histologic_Confirmation', 'Physical_Exam', 'Biomarker_Positivity']
weekly_exercise_freq
['1-2_days', '3-4_days', '5+_days', 'missing']
gene_segments
['segment1', 'segment2', 'segment3', 'segment4', 'segment5', 'segment6', 'segment7', 'segment8', 'segment9', 'segment10', 'segment11', 'segment12', 'segment13', 'segment14', 'segment15']
study_protocol_docs
['sample_preparation_protocol.pdf', 'data_acquisition_methods.docx', 'control_grp_info.xlsx', 'exp_setup_details.txt', 'gene_expr_analysis_methods.csv', 'seq_method_details.pdf', 'medication_schedule.docx', 'tissue_analysis_techniques.txt', 'imaging_methods_summary.pdf', 'stats_methodology_plan.docx', 'research_ethics_docs.pdf', 'cell_origin_details.xlsx', 'dosage_calculation_procedures.txt', 'specimen_preparation_instructions.docx', 'experiment_outcomes_report.pdf']
study_type
['CellGrowthAssay_HD33', 'CellDeathRate_MCF7_CDDP', 'GeneTranscription_T47D_E2', 'CellMigrationAssay_PC3_Ctrl', 'CellInvasionAssay_A549_TGFb', 'ChemoSensitivity_GBM8401_TMZ', 'EndothelialGrowth_HUVEC_VEGF', 'DNARepairActivity_U2OS_Xray', 'ProteinDegradation_SKBR3_Trastuzumab', 'MetabolicProfiling_HepG2_Sorafenib', 'ImmuneResponse_LC540_CBDCA', 'CancerStemCells_K562_Nilotinib', 'EpigeneticAccessibility_HeLa_DMSO', 'LysosomeActivity_MDA231_CQ', 'CellularAging_BJ_TGFa']
sample_preparation_method
['RNA_Isolation', 'DNA_Isolation_Chemical_Method', 'miRNA_Isolation_FFPE', 'DNA_Received', 'Whole_Genome_Amplification', 'Whole_Genome_Amplification_X', 'Total_RNA_Extraction', 'Ancient_DNA_Isolation', 'miRNA_Isolation', 'Noncoding_RNA_Isolation_Melanoma', 'RNA_Isolation', 'Ancient_DNA_Isolation', 'Whole_Genome_Amplification_X', 'DNA_Isolation_Chemical_Method']
research_methods
['Transcriptomics', 'WGS', 'Targeted Drug Evaluation', 'Protein Analysis', 'Metabolic Profiling', 'RNA-Seq', 'ChIP-Seq', 'Cytometry', 'IF', 'TMA', 'In Vitro Assays', 'In Vivo Modeling', 'Genome Editing', 'Single-Cell Analysis', 'PGx']
Processed 220 columns
assay_type
['ATAC-seq', 'ChIP-seq', 'SNP_Array', 'DNA_Methylation_Array', 'RPPA', 'RNA-seq', 'Validation_Experiment', 'Whole_Exome_Sequencing', 'miRNA-seq', 'single_cell_ATAC-seq', 'SNP_Genotyping_Array', 'Protein_Array', 'Transcriptome_Sequencing', 'Bisulfite_Sequencing', 'Protein_Expression_Array']
exposure_time
['Not_Reported', '>=6_Weeks', 'Unknown']
daily_exposure_hrs
['0.5h', '1h', '1.5h', '2h', '2.5h', '3h', '4h', '5h', '6h', '7h', '8h', '10h', '12h', '14h', '16h']
exposure_time_yrs
['1_year', '2_years', '5_years', '10_years', '15_years', '20_years', '25_years', '30_years', '35_years', '40_years', '45_years', '50_years', '55_years', '60_years', '65_years']
exposure_type
['Domestic', 'Work_related', 'Passive', 'Community', 'Not_specified']
risk_factor
['Asbestos', 'Chemical_Exposure', 'Coal_Dust', 'General_Dust', 'Cannabis', 'Ionizing_Radiation', 'Radon_Gas', 'Silica_Dust', 'Tobacco_Smoke', 'Chewing_Tobacco', 'Coal_Dust', 'Tobacco_Smoke', 'Silica_Dust', 'General_Dust']
risk_factors
['Tobacco_exposure', 'UV_radiation', 'Chrysotile_exposure', 'Radon_exposure', 'Alcohol_use', 'HPV_infection', 'HBV_infection', 'HCV_infection', 'Red_meat_consumption', 'Particulate_matter_exposure', 'X-ray_exposure', 'Arsenic_exposure', 'Toluene_exposure', 'H_pylori_infection', 'Methanal_exposure']
bioinformatics_pipelines
['RNA_seq_data_analysis', 'Diff_gene_expr_analysis', 'scRNA_seq_analysis', 'GSEA_analysis', 'Path_analysis', 'Microarray_analysis', 'Prot_expr_profiling', 'ChIP_seq_analysis', 'WGS_analysis', 'Metab_profiling', 'miRNA_expr_analysis', 'qPCR_analysis', 'MS_data_analysis', 'Epigen_mod_analysis', 'Transcript_assembly_annotation']
extracapsular_spread
['Ext', 'Foc', 'NR', 'Foc', 'Ext', 'NR', 'Ext', 'Ext', 'Ext', 'Ext', 'Ext', 'Ext', 'Ext', 'Ext', 'Ext']
extracapsular_spread_status
['Absent', 'Not_Assessed', 'Present']
Processed 230 columns
extranodal_ext_status
['Gross_Ext', 'Micro_Ext', 'No_Ext']
extrascleral_ext
['Present', 'Absent', 'Yes', 'No', 'Positive', 'Negative']
thyroid_extension_status
['T3_Minimal', 'T4a_Moderate_Advanced', 'Not_Applicable', 'Unknown', 'T4b_Very_Advanced']
iris_pigmentation
['Amber', 'Azure', 'Brunneous', 'Griseous', 'Virid', 'Corylus', 'NR', 'Alt', 'Rubious & Violaceous', 'Griseous', 'Amber', 'Griseous', 'Brunneous', 'Corylus', 'Rubious & Violaceous']
FAB_classification_code
['M0_Acute_Myeloblastic_Leukemia_Minimal_Maturation', 'M1_Acute_Myeloblastic_Leukemia_Without_Maturation', 'M2_Acute_Myeloblastic_Leukemia_With_Maturation', 'M3_Acute_Promyelocytic_Leukemia', 'M4_Acute_Myelomonocytic_Leukemia', 'M5_Acute_Monoblastic_and_Monocytic_Leukemia', 'M6_Acute_Erythroid_Leukemia', 'M7_Acute_Megakaryoblastic_Leukemia', 'Not_Classified']
cancer_family_history
['Mammary_cancer', 'Colorectal_neoplasms', 'Pulmonary_cancer', 'Prostatic_neoplasms', 'Ovarian_neoplasms', 'Cutaneous_melanoma', 'Pancreatic_neoplasms', 'Leukaemia', 'NHL', 'Thyroid_neoplasms', 'Renal_cancer', 'Urothelial_carcinoma', 'Gastric_cancer', 'Hepatic_cancer', 'Endometrial_cancer']
seq_file_name
['s1_read1_001.fastq', 's1_read2_001.fastq', 'tumor_sA_read1.fastq', 'tumor_sA_read2.fastq', 'norm_sB_read1.fastq', 'norm_sB_read2.fastq', 'patientX_preRx_read1.fastq', 'patientX_preRx_read2.fastq', 'patientY_postRx_read1.fastq', 'patientY_postRx_read2.fastq', 'ctrl_grp1_read1.fastq', 'ctrl_grp1_read2.fastq', 'exp_grp2_read1.fastq', 'exp_grp2_read2.fastq', 'biopsy_sC_read1_001.fastq']
post_bronch_fev1_fvc_ratio_percent
['75.2%', '68.9%', '82.5%', '70.1%', '88.4%', '64.3%', '79.8%', '72.6%', '85.0%', '67.5%', '90.3%', '62.8%', '77.4%', '69.7%', '83.6%']
pre_bronch_FEV1_FVC_ratio_percent
['72.5%', '68.9%', '74.3%', '80.1%', '66.7%', '82.4%', '78.8%', '69.5%', '75.2%', '81.6%', '70.3%', '77.9%', '83.7%', '65.4%', '79.6%']
post_bronchodilator_fev1_pct
['seventy-five', 'eighty-nine', 'ninety-two', 'one hundred three', 'sixty-seven', 'one hundred ten', 'fifty-eight', 'ninety-five', 'eighty-two', 'one hundred twenty', 'sixty-four', 'one hundred seven', 'seventy-eight', 'ninety-nine', 'eighty-five']
Processed 240 columns
predicted_fev1_pct_pre_bronchodilator
['seventy-two', 'eighty-five', 'ninety-three', 'sixty-seven', 'fifty-eight', 'one hundred ten', 'ninety-nine', 'forty-five', 'seventy-six', 'eighty-eight', 'one hundred three', 'sixty-five', 'seventy-nine', 'fifty-four', 'ninety-six']
cancer_stage
['IA', 'IB1', 'IC', 'IC2', 'IIIA2', 'IIIB', 'IIIC1', 'IV', 'IVB', 'Unknown', 'IVB', 'IC', 'IA', 'IA', 'IIIB']
figo_version_year
["'88", "'95", "'09"]
sample_data
['BRCA1_gene_sequence.fasta', 'Tumor01_sample.bam', 'Patient_3_VHL_variant.vcf', 'Lung_Cancer_RNA_seq.fastq', 'KRAS_Mutation_Expression.xlsx', 'Melanoma_Sample_Panel.ppt', 'Glioblastoma_Patient5_CopyNumberVariation.csv', 'Control_Sample_DNA.maf', 'Prostate_Cancer_Sample8_ProteinArray.txt', 'Breast_Cancer_Patient9_FluorescenceInSituHybridization.jpeg', 'Colon_Cancer_Sample10_GeneChip.tif', 'Leukemia_B_subtype_clinicalData.pdf', 'Ovarian_Cancer_Patient11_Proteome.dat', 'Skin_Cancer_Sample12_messengerRNA.gff', 'Pancreatic_Cancer_Patient13_SingleNucleotidePolymorphism.h5']
data_size_bytes
['0.5KB', '1KB', '2KB', '4KB', '8KB', '16KB', '32KB', '64KB', '128KB', '256KB', '512KB', '1MB', '2MB', '4MB', '8MB']
data_status
['removed', 'failed', 'completed', 'in_progress', 'available', 'pending_submission', 'added', 'in_upload', 'confirmed', 'under_validation', 'added', 'failed', 'confirmed', 'confirmed', 'failed']
dataset_resources
['BRCA1_gene_sequence.fasta', 'MRI_images.dcm', 'Patient_Info.xlsx', 'RNA_sequencing_data.csv', 'Exome_sequence_data.vcf', 'Patient_Clinical_Notes.pdf', 'Lab_Test_Results.json', 'Proteome_data.csv', 'Radiomic_features.csv', 'Treatment_Outcome.docx', 'Genomic_Mutations.maf', 'Patient_Outcome.xlsx', 'IHC_images.zip', 'Drug_Response_Data.csv', 'CellLine_Genotyping_data.txt']
cnv_segments
['gain', 'gain', 'gain', 'gain', 'loss', 'loss', 'loss', 'loss', 'neutral', 'neutral', 'neutral', 'neutral', 'amplification', 'amplification', 'amplification']
outcome_status
['Alive', 'Deceased', 'Deceased_no_Remission', 'Non-Responder', 'Missing', 'NR', 'Adverse_Event', 'Disease_Progression', 'Disease_Relapse', 'Secondary_Cancer', 'Secondary_Cancer_Deceased', 'Missing', 'Missing', 'Missing']
initial_symptom_duration_days
['0-30D', '31-90D', '91-180D', '>180D']
Processed 250 columns
initial_symptoms_pre_diagnosis
['Cognitive_Impairment', 'Cephalalgia', 'Neuromotor_Alterations', 'NR', 'Convulsions', 'Neurosensory_Alterations', 'Unknown', 'Ocular_Alterations', 'NR', 'Neurosensory_Alterations', 'NR', 'Neuromotor_Alterations', 'Neuromotor_Alterations', 'NR', 'NR']
sequencing_batch_id
['SEQ12345X6', 'SEQ23456Y7', 'SEQ34567Z8', 'SEQ45678A9', 'SEQ56789B0', 'SEQ67890C1', 'SEQ78901D2', 'SEQ89012E3', 'SEQ90123F4', 'SEQ01234G5', 'SEQ12345H6', 'SEQ23456I7', 'SEQ34567J8', 'SEQ45678K9', 'SEQ56789L0']
patient_outcomes
['Initial_dx', '3mo_followup', '6mo_followup', '9mo_followup', '1yr_followup', '18mo_followup', '2yr_followup', '3yr_followup', '5yr_followup', 'Recurrence', 'Post_tx_monitoring', 'NED', 'PD', 'SD', 'Palliative_consultation']
read_length_max
['150bp', '200bp', '250bp', '300bp', '350bp', '400bp', '450bp', '500bp', '550bp', '600bp', '650bp', '700bp', '750bp', '800bp', '850bp']
avg_fragment_len
['two_hundred_bp', 'two_fifty_bp', 'three_hundred_bp', 'three_fifty_bp', 'four_hundred_bp', 'four_fifty_bp', 'five_hundred_bp', 'five_fifty_bp', 'six_hundred_bp', 'six_fifty_bp', 'seven_hundred_bp', 'seven_fifty_bp', 'eight_hundred_bp', 'eight_fifty_bp', 'nine_hundred_bp']
min_frag_len
['100bp', '150bp', '200bp', '250bp', '300bp', '350bp', '400bp', '450bp', '500bp', '550bp', '600bp', '650bp', '700bp', '750bp', '800bp']
frag_std_dev_len
['35.2_SD', '47.8_SD', '52.1_SD', '60.5_SD', '42.3_SD', '38.7_SD', '45.9_SD', '50.2_SD', '55.6_SD', '49.1_SD', '43.8_SD', '58.3_SD', '46.5_SD', '51.7_SD', '39.4_SD']
restriction_enzyme
['MboI', 'NA', 'Unknown']
cryopreservation_technique
['Immersion in liquid nitrogen', 'Dimethyl sulfoxide cryopreservation', 'Programmable freezing', 'Glass-like freezing', 'Instantaneous freezing', 'Step-down freezing', 'Immersion freezing', 'Pressure-assisted freezing', 'Bead freezing', 'Constant temperature freezing', 'Vacuum-assisted freezing', 'Nitrogen slush freezing', 'Cold alcohol freezing', 'Carbon dioxide freezing']
GE_junction_involvement_status
['No', 'NR', 'U', 'Yes']
Processed 260 columns
sex
['F', 'M', 'NR', 'U', 'UNSPEC']
gene_expression_profiles
['BRCA1_overexpression', 'TP53_suppression', 'EGFR_upregulation', 'HER2_enhancement', 'KRAS_high_mutation_load', 'PTEN_deletion', 'BCL2_elevated_expression', 'MYC_activation', 'CDKN2A_loss_of_function', 'PIK3CA_alteration', 'ESR1_repression', 'MDM2_overexpression', 'FLT3_ITD', 'ALK_translocation', 'NPM1_alterations']
gene_id
['ARNTL', 'BMP5', 'CARS1', 'CLTCL1', 'ISX', 'MYB', 'RECQL4', 'ROBO2', 'RPS15A', 'ZNF198', 'CARS1', 'ROBO2', 'BMP5', 'RECQL4', 'CLTCL1']
genomic_data_processing_steps
['WGS_Alignment', 'Variant_Calling', 'RNA_Sequencing_Quant', 'CNV_Detection', 'DNA_Methylation_Processing', 'ChIP_Seq_Peak_Identification', 'miRNA_Analysis', 'scRNA_Seq_Analysis', 'Proteogenomics_Concordance', 'SV_Annotation', 'Somatic_Mutation_Consolidation', 'Germline_Variant_Integration', 'Omics_Data_Fusion', 'Transcript_Assembly', 'Epigenomic_Mapping']
germline_variant_detection_methods
['GATK_Best_Practices', 'Mutect2_tumor_only_mode', 'Haplotype_Caller', 'Deep_Variant', 'Strelka_2', 'Var_Scan2', 'Free_Bayes', 'Platypus_variant_caller', 'BCF_tools', 'Sentieon_genomics_DNAseq', 'DRAGEN_Germline', 'Joint_Genotyping', 'Octopus_variant_caller', 'SAMtools_mpileup', 'Canvas_SV_detection']
gleason_score_category
['G1', 'G2', 'G3', 'G4', 'G5', 'NR', 'G2', 'G2', 'G4', 'G2', 'G2', 'G1', 'G4', 'G4', 'G2']
gleason_pattern_tertiary
['P4', 'P5']
gleason_score_percentage
['5%', '10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '65%', '70%', '75%']
gleason_grade
['low_grade', 'intermediate_grade', 'high_grade', 'very_high_grade']
columnar_epithelial_cells_mucosal_presence
['Absent', 'NR', 'U', 'Present']
Processed 270 columns
max_tumor_diameter_cm
['0.5_cm', '1.2_cm', '2.4_cm', '3.1_cm', '4.5_cm', '5.8_cm', '6.3_cm', '7.0_cm', '8.2_cm', '9.4_cm', '10.1_cm', '11.5_cm', '12.7_cm', '13.9_cm', '15.3_cm']
tumor_mass_g
['45200', '88900', '150500', '75300', '30000', '110400', '95700', '60800', '205100', '175000', '25600', '130200', '90000', '55400', '40700']
tumor_growth_speed
['24_hrs', '30_hrs', '36_hrs', '48_hrs', '60_hrs', '72_hrs', '84_hrs', '96_hrs', '108_hrs', '120_hrs', '132_hrs', '144_hrs', '156_hrs', '168_hrs', '180_hrs']
antiretroviral_therapy_status
['No', 'NR', 'Unknown', 'Yes']
body_height_cm
['1.5m', '1.62m', '1.75m', '1.58m', '1.68m', '1.83m', '1.45m', '1.55m', '1.7m', '1.78m', '1.65m', '1.6m', '1.73m', '1.8m', '1.9m']
hepatitis_sv_response
['No_Response', 'NR', 'U', 'Positive_Response']
tumor_grade
['Undifferentiated', 'NR', 'Low_differentiation', 'NA']
histone_type
['H1_family', 'H2A_family', 'H2B_family', 'H3_family', 'H4_family', 'NR', 'UNK']
histone_type
['centromere_protein_A', 'H2A_barrel_domain_binding', 'H2AZ1', 'H2AZ2', 'H2AZv2', 'H31', 'H32', 'H3Y', 'Not_Specified', 'macroH2A', 'H31', 'H2AZv2', 'centromere_protein_A', 'Not_Specified', 'H3Y']
tumor_history_status
['Absent', 'NR', 'Present', 'Absent', 'Absent', 'NR', 'Absent', 'Absent', 'Absent', 'NR', 'NR', 'NR', 'Absent', 'Absent', 'NR']
Processed 280 columns
tumor_history_type
['Colorectal_Ca', 'LGG', 'Pheochromocytoma_Paraganglioma']
hiv_vl_log_copies_ml
['less_than_50_copies_ml', '50_copies_ml', '200_copies_ml', '350_copies_ml', '500_copies_ml', '750_copies_ml', '1000_copies_ml', '1500_copies_ml', '2000_copies_ml', '2500_copies_ml', '3000_copies_ml', '4000_copies_ml', '5000_copies_ml', '7500_copies_ml', '10000_copies_ml']
contraceptive_hormone_type
['NR', 'Prog', 'Prog_Est', 'Unk']
contraceptive_status
['Active', 'Past', 'None', 'NR', 'Unk']
HRT_type
['Estrogen_mono', 'NR', 'Combined_PE', 'Progesterone_mono', 'Unknown']
hpv_strain
['HPV-26', 'HPV-33', 'HPV-35', 'HPV-39', 'HPV-45', 'HPV-51', 'HPV-53', 'HPV-59', 'HPV-68', 'Other_types']
human_papillomavirus_type
['HPV-16', 'HPV-18', 'HPV-33', 'HPV-39', 'HPV-45', 'HPV-51', 'HPV-52', 'HPV-66', 'HPV-68', 'HPV-73']
hyst_margins_involved
['Urinary_Bladder', 'Macro_Parametrium', 'Micro_Parametrium', 'Not_Applicable', 'Not_Documented', 'Unknown_Status', 'Vaginal_Margin', 'Not_Applicable', 'Vaginal_Margin', 'Not_Applicable', 'Urinary_Bladder', 'Micro_Parametrium', 'Not_Applicable', 'Macro_Parametrium', 'Urinary_Bladder']
hysterectomy_status
['Hysterectomy_UNSPEC', 'Not_Performed', 'NR', 'Radical_Hyst', 'Simple_Hyst', 'Unknown', 'Hysterectomy_SPEC']
icd10_codes
['Malignant_neoplasm_of_breast_unspecified', 'Malignant_neoplasm_of_upper_lobe_bronchus_or_lung', 'Malignant_neoplasm_of_colon_unspecified', 'Malignant_neoplasm_of_bladder_unspecified', 'Malignant_neoplasm_of_prostate', 'Malignant_neoplasm_of_pancreas_unspecified', 'Malignant_neoplasm_of_stomach_unspecified', 'Hodgkin_lymphoma_unspecified', 'Acute_myeloblastic_leukemia', 'Malignant_neoplasm_of_ovary_unspecified', 'Malignant_neoplasm_of_endometrium', 'Malignant_neoplasm_of_thyroid_gland', 'Follicular_lymphoma_unspecified', 'Acute_lymphoblastic_leukemia', 'Malignant_melanoma_of_skin_unspecified']
Processed 290 columns
cancer_type_icd10
['Malignant neoplasm of breast unspecified', 'Malignant neoplasm of upper lobe bronchus or lung', 'Malignant neoplasm of prostate', 'Malignant neoplasm of sigmoid colon', 'Malignant neoplasm of bladder unspecified', 'Malignant neoplasm of pancreas unspecified', 'Malignant neoplasm of stomach unspecified', 'Hodgkin lymphoma nodular sclerosis', 'Myeloid leukemia acute', 'Malignant neoplasm of ovary unspecified', 'Follicular lymphoma grade II', 'Lymphoid leukemia acute', 'Malignant neoplasm of thyroid gland', 'Malignant melanoma of skin unspecified', 'Malignant neoplasm of endometrium']
patient_id
['patient_root', 'pt_root', 'subject_root', 'individual_root']
international_germ_cell_cancer_stage_grouping
['Favorable', 'Intermediate', 'Not_Available', 'Unfavorable', 'Data_Missing']
anatomic_location_imaged
['Mammary', 'Pulmonary', 'Cerebral', 'Hepatic', 'Colorectal', 'Pancreatic', 'Prostatic', 'Ovarian', 'Renal', 'Thyroidal', 'Cutaneous', 'Osseous', 'Gastric', 'Vesical', 'Cervical']
scan_date
['2023-Jan-15', '2023-Feb-20', '2023-Mar-10', '2023-Apr-05', '2023-May-25', '2023-Jun-30', '2023-Jul-15', '2023-Aug-09', '2023-Sep-22', '2023-Oct-13', '2023-Nov-03', '2023-Dec-01', '2024-Jan-20', '2024-Feb-17', '2024-Mar-12']
imaging_outcomes
['Peritoneal_Carcinomatosis', 'Renal_Metastasis', 'Hepatic_Metastasis', 'Pulmonary_Metastasis', 'No_Abnormality_Detected', 'Data_Not_Available', 'Lymphadenopathy', 'IVC_Thrombosis']
imaging_outcome
['Indeterminate', 'Neg', 'Not_Done', 'NR', 'Pos', 'Unknown']
pet_suv_values
['low', 'moderate', 'elevated', 'high', 'very_high', 'minimal', 'below_average', 'extremely_high', 'slightly_elevated', 'above_average', 'very_low', 'near_average', 'significantly_high', 'peak']
max_suv_values
['2.5', '4.1', '6.7', '3.2', '5.5', '7.8', '9.0', '10.4', '12.3', '8.6', '14.7', '16.2', '18.5', '20.1', '22.4']
imaging_modality
['Technetium-99m_Scintigraphy', 'Computed_Tomography', 'Magnetic_Resonance_Imaging', 'Positron_Emission_Tomography', 'Sonography']
Processed 300 columns
immunosuppressive_medication_type
['TNF_inhibitor', 'Azathioprine', 'Cyclophosphamide', 'Methotrexate', 'Not_Reported', 'Other', 'Unknown', 'Azathioprine', 'Cyclophosphamide', 'Methotrexate']
under_review
['1', '0', 'Pending', 'Completed']
contains_spike_additions
['Yes', 'No', '0', '1']
event_date
['Dx', 'First_Pt_Visit', 'Tx_Initiation', 'Genomic_Seq_Start', 'Dx_Recurrence', 'Sample_Collection', 'Enrollment_Date', 'Sample_Collection', 'Genomic_Seq_Start', 'Enrollment_Date', 'Sample_Collection', 'Enrollment_Date', 'Genomic_Seq_Start', 'Genomic_Seq_Start', 'Dx']
disease_status_at_onset
['Initial_Dx', 'NR', 'Persistent_Dx', 'Progressive_Dx', 'Recurrent_Dx', 'Refractory_Dx', 'Residual_Dx', 'Unknown', 'Residual_Dx', 'Unknown', 'NR', 'NR', 'Unknown', 'NR', 'Residual_Dx']
initial_wt_kg
['45.2_kg', '30.5_kg', '55.8_kg', '60.1_kg', '25.4_kg', '35.7_kg', '40.3_kg', '50.6_kg', '65.9_kg', '70.0_kg', '75.3_kg', '80.6_kg', '85.1_kg', '90.4_kg', '95.7_kg']
tumor_grade
['Differentiated', 'NR', 'Poorly_Diff', 'Undiff', 'Undiff_or_Poorly_Diff', 'Unknown']
histology_classification
['Favorable_Prognosis', 'NR', 'Poor_Prognosis', 'Unknown']
inrg_classification
['Localized_1', 'Localized_2', 'Metastatic', 'Metastatic_Special', 'NR', 'Unknown']
cancer_stage
['NR', 'I', 'IIA', 'IIB', 'III', 'IV', 'IVS', 'UNK', 'IIB', 'IV', 'IVS', 'I', 'IIB', 'UNK', 'III']
Processed 310 columns
sequencing_technology
['Roche 454 GS FLX Titanium', 'Illumina GAIIx', 'Illumina HiSeq2000', 'Illumina HiSeq X5', 'Illumina HiSeq X10', 'Illumina NovaSeqX', 'Life Technologies Ion PGM', 'Life Technologies Ion Proton', 'Thermo Fisher Ion S5', 'NA', 'Roche 454 GS FLX Titanium', 'Life Technologies Ion PGM', 'Illumina GAIIx', 'Illumina HiSeq X10', 'Life Technologies Ion PGM']
planned_publication_date
['2023-Jul-15', '2023-Sep-01', '2023-Nov-20', '2024-Jan-05', '2024-Mar-10', '2024-May-30', '2024-Aug-15', '2024-Oct-22', '2025-Feb-12', '2025-Apr-07', '2025-Jun-29', '2025-Sep-03', '2025-Nov-17', '2026-Jan-20', '2026-Mar-15']
tumor_size_mm
['25mm', '48mm', '71mm', '93mm', '120mm', '154mm', '186mm', '219mm', '242mm', '275mm', '308mm', '341mm', '373mm', '406mm', '438mm']
IPI_score
['High_Risk', 'High_Intermediate_Risk', 'Low_Risk', 'Low_Intermediate_Risk']
int_regions
['int_1', 'int_2', 'int_3', 'int_4', 'int_5', 'int_6', 'int_7', 'int_8', 'int_9', 'int_10', 'int_11', 'int_12', 'int_13', 'int_14', 'int_15']
irs_classification
['Group_2', 'Group_3A', 'Group_3B', 'Group_2A', 'Group_2B', 'Group_2C', 'Group_4', 'Group_1A', 'Group_1B', 'NR', 'Group_2C', 'Group_4', 'Group_4', 'Group_2C', 'Group_4']
irs_stage_alternative
['stage_1', 'stage_2', 'stage_3', 'stage_4', 'NR', 'UNK', 'stage_3', 'stage_3', 'stage_3', 'stage_3', 'NR', 'UNK', 'stage_3', 'stage_4', 'stage_4']
ffpe_status
['Formalin-Fixed', 'Fresh', 'Paraffin-Embedded', 'Non-FFPE']
is_deprecated
['Yes', 'No', 'Active', 'Inactive', '0', '1']
hepatic_fibrosis_stage
['0_None', '1-2_Portal_Fibrosis', '3-4_Bridging_Fibrosis', '5_Incomplete_Cirrhosis', '6_Full_Cirrhosis', 'Not_Reported', 'Unknown']
Processed 320 columns
cancer_stage
['Stage_I', 'Stage_II', 'Stage_III', 'NR', 'Unk']
performance_score_kps
['10_dead', '100_normal', '20_very_poor', '30_severely_disabled', '40_disabled', '50_requires_considerable_assistance', '70_cares_for_self', '80_normal_activity_with_effort', '90_minor_signs_or_symptoms', 'unknown']
sequence_quality_check
['Failure', 'Not_Available', 'Successful', 'Not_Determined', 'Warning']
clinical_biomarkers
['Leukocyte_Blast_Percentage', 'Circulating_Tumor_Cells', 'Serum_Creatinine', 'Beta-hCG', 'HPV', 'Immature_Myelocytes', 'Myeloblasts', 'Soluble_Mesothelin-Related_Peptides', 'CA_72-4', 'Total_Serum_Protein']
lane_id
['L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8', 'L9', 'L10', 'L11', 'L12', 'L13', 'L14', 'L15']
extrapelvic_peritoneal_involvement_size
['macro_<=2cm', 'macro_>2cm', 'micro', 'not_reported', 'unknown']
current_disease_status
['Biochemical_recurrence', 'Distant_metastasis', 'Local_recurrence', 'Data_not_collected', 'No_evidence_of_disease', 'Unknown_status', 'Present_with_tumor', 'Unknown_status_not_reported', 'Local_recurrence_not_reported', 'Distant_metastasis_not_reported', 'Biochemical_recurrence_not_reported']
side_of_lesion
['Bilat', 'L', 'Mid', 'NR', 'R', 'Uni', 'NA']
record_creation_timestamp
['2015-03-12T08:47:30+00:00', '2016-07-26T14:22:15+00:00', '2017-05-30T09:55:00+00:00', '2018-01-19T16:33:45+00:00', '2019-11-08T11:04:20+00:00', '2020-02-29T18:15:55+00:00', '2021-04-14T07:46:10+00:00', '2022-08-23T13:27:05+00:00', '2023-06-05T19:08:40+00:00', '2014-09-17T20:50:25+00:00', '2013-12-03T22:31:50+00:00', '2012-10-20T23:13:15+00:00', '2011-08-06T01:54:30+00:00', '2010-05-22T03:35:45+00:00', '2009-03-09T05:17:00+00:00']
last_modified_timestamp
['2021-03-15T14:30Z', '2022-06-20T09:15Z', '2023-01-05T11:45Z', '2021-07-22T16:00Z', '2022-09-12T10:20Z', '2023-02-28T08:30Z', '2021-04-18T12:05Z', '2022-05-25T14:50Z', '2023-03-10T15:25Z', '2021-08-30T17:45Z', '2022-10-07T13:00Z', '2023-01-22T09:55Z', '2021-05-13T18:10Z', '2022-07-19T20:35Z', '2023-02-15T07:40Z']
Processed 330 columns
num_lesions_treated
['single', 'double', 'triple', 'quadruple', 'quintuple', 'sextuple', 'septuple', 'octuple', 'nonuple', 'decuple', 'dodecuple', 'pentadecuple', 'icosi', 'icosipent', 'icositriantal']
cancer_data_sources
['Oncogene_Exp', 'Tumor_Suppressor_Seq', 'Metastasis_Map', 'Carcinoma_Cell_Library', 'Angiogenesis_Genes', 'Immune_Editing_DB', 'Cancer_Stem_Cell_Network', 'Cancer_Virology_Library', 'Oncolytic_Virus_Repository', 'Neoantigen_Repository', 'Radiogenomics_Data_Archive', 'Chemoresistance_Genome', 'Tumor_Microenvironment_Catalogue', 'Cancer_Microbiome_DB', 'Precision_Oncology_Library']
library_prep_kit_cat_no
['NEB E7645', 'KAPA KK8504', 'Illumina 20015964', 'Illumina 20018705', 'Qiagen 180493', 'Takara 634413', 'Illumina 20020594', 'NEB E7530', 'KAPA HMR8455', 'Agilent 5190-8863', 'Thermo Fisher 4471252', 'Illumina 20015964', 'Lexogen 015.96', 'Takara 634888', 'Twist Bioscience 101031']
seq_lib_prep_kit
['Illumina TruSeq Stranded mRNA', 'New England Biolabs NEBNext Ultra II DNA', 'KAPA Biosystems Stranded RNA-Seq', 'Takara SMARTer Stranded Total RNA-Seq', 'Qiagen QIAseq Stranded mRNA', 'Illumina Nextera XT DNA', 'Illumina TruSeq DNA PCR-Free', 'Thermo Fisher Ion AmpliSeq Library', 'Agilent SureSelect XT Target Enrichment', 'New England Biolabs NEBNext Ultra RNA', 'Illumina TruSeq Stranded Total RNA', 'Takara Clontech SMART-Seq v4', 'Illumina Nextera DNA Flex', 'Agilent SureSelect XT2', 'Twist Bioscience Exome']
seq_kit_manufacturer
['Illumina Inc.', 'Thermo Fisher', 'Qiagen N.V.', 'New England Biolabs Inc.', 'Roche Holding AG', 'Agilent', 'Takara Bio Inc.', 'Bio-Rad', 'Pacific Biosciences', 'ONT (Oxford Nanopore)', 'Merck (Sigma-Aldrich)', 'PerkinElmer Inc.', '10x Genomics Inc.', 'Zymo', 'Promega Corporation']
seq_lib_prep_kit_ver
['TruSeq RNA Library Prep Kit v2', 'Nextera XT Library Prep Kit v2.5', "QIAseq UPX 3' Transcriptome Kit v1", 'SMARTer Stranded Total RNA-Seq v2', 'NEBNext Ultra II RNA Library Prep v3', 'KAPA Hyper Prep Kit v5.4', 'SureSelectXT Human All Exon Kit v7', 'Ion AmpliSeq Library Prep Kit v2.0', 'TruSeq DNA PCR-Free Kit v1', 'NEBNext Ultra DNA Prep Kit v2.1', 'SureSelectXT Methyl-Seq Library Prep Kit v1.0', 'TruSeq Stranded mRNA Library Prep Kit v3', 'Ribo-Zero Gold RNA-Seq Kit v1.2', 'QIAseq DNAseq Library Kit v4', 'SMART-Seq v4 Ultra Low Input RNA Kit']
library_prep_method
['Affinity_Capture', 'Sequence_Capture', 'Other', 'Amplification', 'Oligo-dT_Selection', 'Unspecified', 'MicroRNA_Length_Selection', 'Ribosomal_RNA_Removal', 'Other', 'Other', 'Sequence_Capture', 'Amplification', 'Ribosomal_RNA_Removal', 'Sequence_Capture', 'Sequence_Capture']
RNA_seq_library_orientation
['FS', 'NA', 'SS', 'US']
sequencing_technique
['Transposase-Accessible Chromatin Sequencing', 'Chromatin Immunoprecipitation Sequencing', 'Chromatin Interaction Analysis by Paired-End Tag Sequencing', 'Ribonucleic Acid Sequencing', 'Precision Medicine Sequencing', 'Whole Genome Sequencing', 'Whole Exome Sequencing', 'N6-Methyladenosine Immunoprecipitation Sequencing', 'Single-Cell ATAC Sequencing', 'Single-Cell RNA Sequencing']
abnormal_loci_count
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'twelve', 'fifteen', 'twenty', 'twenty-five']
Processed 340 columns
num_of_loci
['single', 'double', 'quintuple', 'decuple', 'pentadecuple', 'icosi', 'icosipent', 'triaconta', 'tetraconta', 'pentaconta', 'hexaconta', 'heptaconta', 'octaconta', 'nonaconta', 'centi']
gene_chromosome_location
['BRCA1_17q21.31', 'TP53_17p13.1', 'EGFR_7p11.2', 'KRAS_12p12.1', 'APC_5q22.2', 'MYC_8q24.21', 'CDKN2A_9p21.3', 'PTEN_10q23.31', 'RB1_13q14.2', 'ERBB2_17q12', 'ABL1-BCR_22q11.23', 'MSH2_2p22.2', 'VHL_3p25.3', 'FLT3_13q12.2', 'ESR1_6q25.1']
max_tumor_diameter
['2.5cm', '4.8cm', '7.3cm', '10.1cm', '12.6cm', '15.0cm', '17.8cm', '20.4cm', '23.1cm', '25.5cm', '28.9cm', '31.2cm', '33.7cm', '36.5cm', '39.8cm']
follow_up_status
['Not_Followed_Up', 'Not_Applicable', 'Followed_Up', 'NA']
lymph_node_dissection_type
['FND', 'MRND', 'RND']
lymph_node_excision_location
['Cervical', 'Left_axillary', 'Right_axillary', 'Not_Otherwise_Specified']
lymph_node_sites
['Cervical', 'Lateral_axillary', 'Epitrochlear', 'Mediastinal', 'Common_iliac', 'Unspecified', 'External_iliac', 'Pelvic', 'Unspecified', 'Retroperitoneal', 'Splenic_hilum', 'Submandibular', 'Supraclavicular', 'Pelvic', 'Common_iliac']
lymph_node_status
['Indeterminate', 'Neg', 'NR', 'Pos', 'Unk']
positive_lymph_node_count
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen']
lymph_node_status
['Absent', 'NR', 'Present', 'Absent', 'Absent', 'Present', 'NR', 'NR', 'Absent', 'Present', 'Absent', 'NR', 'NR', 'Absent', 'Absent']
Processed 350 columns
num_lymph_nodes_examined
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'twelve', 'fifteen', 'twenty', 'twenty-five']
lymph_invasion_status
['Absent', 'NR', 'U', 'Present', 'U', 'Absent', 'Absent', 'Absent', 'U', 'NR', 'U', 'U', 'U', 'Absent', 'Absent']
optical_zoom_level
['40x', '100x', '200x', '400x', '600x', '800x', '1000x', '1200x', '1500x', '2000x', '2500x', '3000x', '4000x', '5000x', '6000x']
version_num
['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10', 'v11', 'v12', 'v13', 'v14', 'v15']
tumor_margin_dist_mm
['0.1_cm', '0.5_cm', '1_cm', '1.5_cm', '2_cm', '2.5_cm', '3_cm', '4_cm', '5_cm', '6_cm', '7_cm', '8_cm', '9_cm', '10_cm', '15_cm']
tumor_margin_status
['Indeterminate', 'Positive', 'NR', 'Negative', 'Unknown']
tumor_invasion_sites
['Gerotas_Fascia', 'Kidney_Parenchyma', 'Perirenal_Fat', 'Kidney', 'Kidney_Capsule', 'Renal_Hilum', 'Renal_Vein', 'Ureter', 'Renal_Vein', 'Renal_Vein', 'Gerotas_Fascia', 'Renal_Vein', 'Renal_Vein', 'Gerotas_Fascia', 'Renal_Hilum']
relationship_status
['Dissolved', 'Cohabiting', 'Spliced', 'Single', 'Apart', 'Bereaved']
masaoka_karnofsky_stage
['Stage_1', 'Stage_3', 'Stage_2A', 'Stage_2B', 'Stage_4A', 'Stage_4B']
cg_methylation_status
['CGI_1001_Methyl_Inc', 'CGI_2045_Methyl_Dec', 'CGI_3250_Stable', 'CGI_4120_Methyl_Inc', 'CGI_5287_Methyl_Dec', 'CGI_6392_Stable', 'CGI_7450_Methyl_Inc', 'CGI_8532_Methyl_Dec', 'CGI_9691_Stable', 'CGI_10785_Methyl_Inc', 'CGI_11820_Methyl_Dec', 'CGI_12945_Stable', 'CGI_14010_Methyl_Inc', 'CGI_15175_Methyl_Dec', 'CGI_16340_Stable']
Processed 360 columns
genetic_variants
['G12D_KRAS', 'R175H_TP53', 'V600E_BRAF', 'E545K_PIK3CA', 'T167A_PTEN', 'L858R_EGFR', 'R876*_APC', 'W110*_CDKN2A', 'Q61R_NRAS', 'E1202K_ALK', 'D1010N_MET', 'S310F_ERBB2', 'R132H_IDH1', 'W288*_NPM1', 'ITD_FLT3']
primary_tumor_location
['Maxillary', 'Mediastinal_nodes', 'Ovarian', 'Pancreatic', 'Parotid', 'Periorbital', 'Pericardial', 'Soft_tissue', 'Splenic_nodes', 'Thyroidal', 'Maxillary', 'Soft_tissue', 'Parotid']
file_hash
['e4da3b7fbbce2345d7772b0674a318d5_hash', '1679091c5a880faf6fb5e6087eb1b2dc_hash', '8f14e45fceea167a5a36dedd4bea2543_hash', 'c9f0f895fb98ab9159f51fd0297e236d_hash', '45c48cce2e2d7fbdea1afc51c7c6ad26_hash', 'd3d9446802a44259755d38e6d163e820_hash', '6512bd43d9caa6e02c990b0a82652dca_hash', 'c20ad4d76fe97759aa27a0c99bff6710_hash', 'c51ce410c124a10e0db5e4b97fc2af39_hash', 'aab3238922bcc25a6f606eb525ffdc56_hash', '9bf31c7ff062936a96d3c8bd1f8f2ff3_hash', '70efdf2ec9b086079795c442636b55fb_hash', '98f13708210194c475687be6106a3b84_hash', '3c59dc048e8850243be8079a5c74d079_hash', '1f0e3dad99908345f7439f8ffabdffc4_hash']
avg_seq_depth
['30_fold_coverage', '60_fold_coverage', '100_fold_coverage', '150_fold_coverage', '200_fold_coverage', '250_fold_coverage', '300_fold_coverage', '350_fold_coverage', '400_fold_coverage', '450_fold_coverage', '500_fold_coverage', '550_fold_coverage', '600_fold_coverage', '650_fold_coverage', '700_fold_coverage']
imaging_modality
['Ultrasound', 'Histologic', 'X-ray', 'CT_scan', 'MRI']
measurement_unit_abbr
['cm', 'mm', 'cm', 'cm', 'cm', 'cm', 'cm', 'cm', 'cm', 'cm', 'mm', 'cm', 'cm', 'cm', 'cm']
medulloblastoma_subtype
['Non-WNT/Non-SHH', 'ND', 'NR', 'Sonic_Hedgehog', 'U', 'Wingless_Pathway', 'ND', 'ND', 'Sonic_Hedgehog', 'Non-WNT/Non-SHH', 'Wingless_Pathway', 'ND', 'ND', 'ND', 'U']
primary_melanoma_status
['Absent', 'NR', 'Present']
menopausal_status
['NR', 'Peri-menopausal', 'Post-menopausal', 'Pre-menopausal', 'Unknown']
metaplastic_status
['Absent', 'NR', 'Unk', 'Present']
Processed 370 columns
metastatic_status_at_diag
['distant_met', 'met_nos', 'no_met', 'not_rptd', 'regional_met', 'unknown']
initial_metastatic_sites
['Peritoneal_Effusion', 'Renal', 'Hepatic', 'Pulmonary', 'Nodal', 'Local', 'Pleural', 'Retroperitoneal', 'Spinal', 'Urethral', 'Vertebral_Column', 'Nodal', 'Peritoneal_Effusion', 'Pulmonary', 'Spinal']
diagnosis_method
['Postmortem_Examination', 'Bladder_Scopy', 'Eye_Tumor_Removal', 'Cutaneous_Biopsy', 'Minimally_Invasive_Surgery', 'Clinical_Examination', 'Tumor_Removal_Surgery', 'Pleural_Fluid_Analysis', 'Sonography_Guided_Biopsy', 'Not_Specified']
sample_collection_method
['Venipuncture', 'BMA', 'Transoral_Laser_Microsurgery', 'Core_Needle_Biopsy', 'Testis_Removal', 'Total_Colectomy', 'Maxillary_Sinus_Surgery', 'Radical_Prostatectomy', 'Laryngeal_Cancer_Surgery', 'Excisional_Biopsy']
DNA_methylation_data_processing_steps
['Bisulfite Seq QC', 'Inter-platform Data Harmonization', 'M-Value Adjustment', 'CpG Site Reannotation', 'Batch Effects Removal', 'Methylation Differential Analysis', 'Technical Replicates Management', 'Unreliable CpG Filtering', 'Genomic Position Correction', 'Signal-to-Noise Enhancement', 'Epigenetic Cell Composition Analysis', 'Demographic Factors Normalization', 'Sample Integrity Check', 'Missing Data Estimation', 'Experimental Noise Reduction']
DNA_methylation_levels
['high', 'moderate', 'moderately_high', 'low', 'moderately_low', 'very_high', 'very_low', 'high', 'very_low', 'high', 'low', 'very_high', 'low', 'moderate']
methylation_conversion_protocols
['Bisulfite_Sequence_Liftover', 'Whole_Genome_Bisulfite_Sequencing_to_hg38', 'Interspecies_Methylation_Comparison', 'Array_to_Sequence_Methylation_Liftover', 'ENCODE_Methylation_Conversion', 'Infinium_Array_Liftover', 'Reduced_Representation_Bisulfite_Sequencing_to_GRCh38', 'CGmap_to_Bismark_Conversion', 'HumanMethylation450_Update', 'Oxford_Nanopore_Methylation_to_hg19', 'MethylKit_Transformation_Workflow', 'BSMAP_to_MethPipe_Conversion', 'EpicArray_to_Sequence_Conversion', 'EPIC_to_hg38_Methylation_Liftover', 'Cross-Platform_Methylation_Normalization']
micromet_status
['Absent', 'NR', 'Unknown', 'Present']
micropap_features
['Absent', 'NR', 'Positive', 'Unk']
minor_rel
['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10', 'v11', 'v12', 'v13', 'v14', 'v15']
Processed 380 columns
miRNA_detection_methods
['miRNA_sequencing', 'quantitative_RT-PCR', 'NanoString_technology', 'miRNA_microarray', 'ISH', 'Northern_analysis', 'ddPCR', 'RIP-seq', 'sRNA_cloning', 'LNA_techniques', 'next_generation_sequencing', 'stem-loop_qRT-PCR', 'miR_pull-down', 'FirePlex_analysis', 'miRNA_seq']
microRNA_expressions
['hsa-miR-21', 'hsa-miR-155', 'hsa-miR-16', 'hsa-miR-34a', 'hsa-miR-15a', 'hsa-miR-146a', 'hsa-miR-10b', 'hsa-miR-221', 'hsa-miR-222', 'hsa-miR-17', 'hsa-miR-92a', 'hsa-miR-205', 'hsa-miR-200c', 'hsa-miR-141', 'hsa-miR-29c']
MMR_status
['No', 'NR', 'U', 'Yes']
cell_death_rate_index
['High', 'Moderate', 'Minimal', 'NR', 'NA']
mitotic_rate
['low', 'moderate', 'high', 'very_high']
mitotic_area_total
['1.5k', '2.3k', '1.8k', '1.25k', '2k', '0.95k', '1.7k', '2.1k', '1.9k', '2.2k', '1.6k', '1.4k', '2.4k', '1.3k', '1.1k']
genetic_testing_technique
['Chromosomal_analysis', 'Unspecified', 'Flow_cytometric_analysis', 'Immunocytochemistry', 'Chromosome_analysis', 'DNA_microarray', 'STR_analysis', 'Histology', 'Unspecified', 'NR', 'Quantitative_real-time_PCR', 'DNA_sequencing', 'Unspecified', 'STR_analysis', 'NR']
variant_effect
['UTR5_Variant', 'CDS_Variant', 'miRNA_Variant', 'Missense_Variant', 'Nonsense_Mediated_Decay_Variant', 'Non_coding_Exon_Variant', 'Splice_Site_Variant', 'Stop_Gain', 'Stop_Retained_Variant', 'Transcription_Factor_Binding_Site_Amplification', 'miRNA_Variant', 'UTR5_Variant', 'UTR5_Variant', 'UTR5_Variant', 'CDS_Variant']
genetic_biomarkers
['BRCA1/2 gene analysis', 'EGFR gene mutation analysis', 'ALK rearrangement', 'PD-L1 level', 'KRAS gene mutation analysis', 'HER2 amplification', 'PIK3CA gene analysis', 'Microsatellite Instability testing', 'Tumor Mutational Burden analysis', 'NTRK fusion analysis', 'BCR-ABL fusion detection', 'CD20 level analysis', 'FLT3 gene mutations', 'IDH1/2 gene analysis', 'MGMT promoter methylation status']
tumor_growth_pattern
['Cohesive_cluster', 'Cribriform', 'Micropapillae', 'Discohesive', 'PRCC_pattern', 'Papillary_pattern', 'NOS', 'Solid_growth', 'Tubuliform', 'Micropapillae', 'Discohesive', 'Solid_growth', 'Papillary_pattern']
Processed 390 columns
histology_code
['neoplasm_benign', 'carcinoma_nos', 'follicular_lymphoma', 'bronchioloalveolar_carcinoma', 'adenoma_benign', 'fibroadenoma_nos', 'ductal_carcinoma_nos', 'schwannoma_benign', 'papillary_carcinoma_benign', 'myeloid_leukemia_chronic', 'carcinoma_nos', 'bronchioloalveolar_carcinoma', 'carcinoma_nos', 'carcinoma_nos', 'adenoma_benign']
microsatellite_instability_score
['low', 'intermediate', 'high']
microsatellite_instability_status
['Microsatellite_instability', 'Microsatellite_stable', 'MSI-H', 'MSS']
sample_id
['BC123A4', 'MX987Z1', 'ID456C2', 'BA789X1', 'SQ321H7', 'PC654M3', 'LB852W4', 'DN963R5', 'MB147Q6', 'XB258E7', 'QR369S8', 'ZX531G9', 'VB682J0', 'NM974K1', 'HG258L2']
mutation_position
['c.35G>A', 'c.37G>A', 'c.181C>A']
MG_severity_scale
['I_Minimal', 'II_Mild', 'III_Moderate', 'IV_Severe', 'V_Intensive']
lowest_cd4_count
['fifteen', 'thirty_two', 'fifty', 'seventy_two', 'eighty_eight', 'one_hundred_five', 'one_hundred_twenty_three', 'one_hundred_forty_five', 'one_hundred_sixty_seven', 'one_hundred_ninety', 'two_hundred_ten', 'two_hundred_thirty', 'two_hundred_fifty_five', 'two_hundred_eighty', 'three_hundred_five']
genomic_feature
['Loss_of_Heterozygosity', 'Microsatellite_Instability', 'Normalized_Log_Ratio', 'Comparative_Log_Ratio', 'coding_sequence', 'human_genome_version_19', 'splicing_junctions', 'LOWESS_norm_smooth', 'raw_data', 'segmented_data', 'LOWESS_normalization', 'hg19_reference', 'Pairwise_Log_Ratio', 'Loss_of_Het', 'coding_region']
institution_domain
['mdacc.org', 'msk.org', 'dfci.harvard.edu', 'sanger.ac.uk', 'genome.wustl.edu', 'cam.ac.uk', 'vumc.org', 'ucsf.edu', 'hopkinsmedicine.org', 'fhcrc.org', 'nci.nih.gov', 'mayo.edu', 'cshl.edu', 'icr.ac.uk', 'gustaveroussy.fr']
tumor_necrosis_pct
['0.5%', '2.3%', '4.7%', '7.1%', '9.8%', '12.5%', '15.2%', '18.6%', '21.0%', '23.4%', '26.7%', '29.9%', '33.3%', '36.1%', '39.5%']
Processed 400 columns
tumor_necrosis_status
['Absent', 'NR', 'Present']
no_normal_match_lp_wgs
['Absent', 'Present', 'NA', 'Missing']
lacks_control_tumor_seq
['Absent', 'Present', 'NA']
lacks_matched_normal_sample
['Absent', 'Present', 'Not_available', 'NA']
lacks_matched_normal_WXS
['Yes', 'No']
extranodal_extension_status
['Absent', 'Indeterminate', 'NR', 'Positive', 'Unknown']
extranodal_extension_status
['Absent', 'NR', 'U', 'Present', 'U', 'NR', 'U', 'U', 'U', 'U', 'U', 'U', 'NR', 'NR']
non_cancer_drugs
['Paracetamol', 'Acetylsalicylic_Acid', 'Glucophage', 'HMG-CoA_Reductase_Inhibitor', 'Not_Otherwise_Specified']
genotype_snp_comparison_status
['Absent', 'Collection_Prohibited', 'Data_Not_Submitted', 'Data_Unknown', 'Present', 'Collection_Prohibited', 'Data_Unknown', 'Collection_Prohibited', 'Present', 'Data_Not_Submitted', 'Present', 'Absent', 'Data_Not_Submitted', 'Data_Not_Submitted', 'Data_Unknown']
clinical_observations
['Metastatic evidence observed', 'Elevated aggressive biomarkers', 'Familial cancer history', 'Partial treatment efficacy', 'Tumor-specific genetic alteration', 'Recurrence likelihood high', 'Experimental therapy participation', 'High tumor growth rate', 'Tumor size decrease', 'Symptomatic relief reported', 'Chemotherapy intolerance', 'Tumor-free surgical margins', 'Targeted therapy resistance', 'Hospice care initiated', 'Post-diagnosis lifestyle modification']
Processed 410 columns
expected_cell_count
['one_hundred', 'two_hundred', 'three_hundred', 'four_hundred', 'five_hundred', 'six_hundred', 'seven_hundred', 'eight_hundred', 'nine_hundred', 'one_thousand', 'eleven_hundred', 'twelve_hundred', 'thirteen_hundred', 'fourteen_hundred', 'fifteen_hundred']
cycles_count
['single', 'double', 'triple', 'quad', 'quint', 'sext', 'oct', 'dec', 'dodec', 'pentadec', 'octadec', 'vigint', 'quadvigint', 'trigint', 'triacontahex']
total_dose_fractions
['single', 'five', 'ten', 'fifteen', 'twenty', 'twenty_five', 'thirty', 'thirty_three', 'thirty_five', 'thirty_seven', 'forty', 'forty_five', 'fifty', 'fifty_five', 'sixty']
cell_proliferation_count
['fifty', 'one_hundred_twenty', 'two_hundred', 'three_hundred_fifty', 'four_hundred_fifty', 'six_hundred', 'seven_hundred_fifty', 'nine_hundred', 'one_thousand_fifty', 'one_thousand_two_hundred_fifty', 'one_thousand_five_hundred', 'one_thousand_eight_hundred', 'two_thousand_one_hundred', 'two_thousand_four_hundred', 'two_thousand_seven_hundred_fifty']
work_experience_yrs
['1_year', '3_years', '5_years', '8_years', '10_years', '12_years', '15_years', '18_years', '20_years', '23_years', '25_years', '28_years', '30_years', '35_years', '40_years']
job_title
['Physician', 'RN', 'Lab Tech', 'Pharmacy Specialist', 'Biomedical Researcher', 'Public Health Expert', 'Bioengineer', 'X-ray Tech', 'Cancer Nurse', 'Data Analyst in Clinical Research', 'Computational Biologist', 'Public Health Officer', 'Healthcare Administrator', 'OT', 'Nutritionist']
OCT_Embedding_Status
['Yes', 'No', 'Confirmed', 'Denied', 'Embedded', 'Not_Embedded', 'Compound_Used', 'Compound_Not_Used', 'Sample_Embedded', 'Sample_Not_Embedded', 'Positive', 'Negative', 'Unknown']
additional_clinical_features
['Grade_of_Tumor', 'Presence_of_Lymphovascular_Invasion', 'Presence_of_Perineural_Invasion', 'Status_of_Hormone_Receptors', 'Status_of_HER2', 'Proliferation_Index_Ki67', 'Presence_of_Tumor_Infiltrating_Lymphocytes', 'Level_of_PD-L1_Expression', 'Status_of_MSI', 'Performance_Status_ECOG', 'Type_of_Molecular_Subtype', 'Burden_of_Tumor_Mutations', 'Score_of_Oncotype_DX', 'Status_of_BRCA_Mutations', 'Status_of_TP53_Mutation']
ovarian_capsule_status
['Not_Reported', 'Capsule_Fragmented', 'Capsule_Intact', 'Capsule_Ruptured', 'Unknown']
ovarian_involvement_status
['Absent', 'Indeterminate', 'NR', 'Positive', 'Unknown']
Processed 420 columns
seq_quality_status
['FAILURE', 'NR', 'SUCCESS', 'UNK', 'WARNING']
oxygen_utilization_flag
['No', 'NR', 'U', 'Yes']
oxygen_admin_mode
['Continuous_Oxygen_Therapy', 'On-Demand_Oxygen_Therapy', 'On-Off_Oxygen_Therapy']
smoking_history_pack_years
['none', 'less_than_half', 'one_and_half', 'two', 'five', 'ten', 'fifteen', 'twenty', 'twenty_five', 'thirty', 'thirty_five', 'forty', 'forty_five', 'fifty', 'sixty']
translocations_diff_chromosomes
['one_twenty', 'four_fifty', 'seventy_five', 'three_hundred', 'one_eighty', 'six_hundred', 'ninety', 'two_forty', 'three_thirty', 'two_ten', 'one_fifty', 'two_seventy', 'three_sixty', 'four_twenty', 'thirty']
pancreatitis_diagnosis_year
['1998', '2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021', '2022', '2023', '2024']
prcc_subtype
['Type_I', 'Type_II', 'Type_1', 'Type_2']
specimen_types
['Primary_tumor_biopsy', 'Peripheral_blood_sample', 'Adjacent_normal_tissue', 'Bone_marrow_aspirate', 'Pleural_effusion', 'Oral_sample', 'CSF', 'Urine', 'Peritoneal_fluid', 'Cutaneous_biopsy', 'Lymph_biopsy', 'Fecal_sample', 'FNA', 'Surgical_specimen', 'Oral_swab']
radiation_exposure_in_parents
['Absent', 'NR', 'Present', 'Absent', 'Absent', 'Absent', 'NR', 'Absent', 'Present', 'Absent', 'Absent', 'Absent', 'Absent', 'NR', 'Absent']
cell_line_passage_no
['P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'P10', 'P15', 'P20', 'P25', 'P30', 'P35']
Processed 430 columns
variant_clinical_significance
['benign', 'likely_benign', 'likely_pathogenic', 'pathogenic', 'variant_of_uncertain_significance']
cancer_types
['IDC', 'LCIS', 'DCIS', 'ILC', 'TNBC', 'HER2_pos_breast_cancer', 'Follicular_lymphoma', 'Hodgkins_lymphoma', 'Non_Hodgkins_lymphoma', 'SqCC', 'AdenoCA', 'Cutaneous_melanoma', 'GBM', 'Osteogenic_sarcoma', 'LMS']
path_report_id
['4f12bc9e-6f4c-8eba-17e3-1a6432f347', '5e2fbc8a-594e-c98b-242a-8b8f4fd7e6', '7a8b9c45-6748-d28e-2055-a8c2d38e79', '9d0e1f3b-1443-adbb-57c7-f29b6d2a1b', 'b3d1126f-b74f-939c-5a3b-5b76f2c491', 'c2e5de0a-8e4f-77a6-583c-5d8b3c5b7f', 'd8f5e21e-4c4a-af9f-8c7a-9e5985b8f0', 'e4a3bc7b-2e46-d7a2-573e-8d99d6f5ab', 'f1d2c35e-6f7a-8b9c-0d1e-2f3a4b5c6d', 'g2h3i4k6-l7m8-n9o0-p1q2-r3s4t5u6v7', 'h7g8f9d1-c2b3-a4s5-d6f7-g8h9i0j1k2', 'i9h8g7e5-d4c3-b2a1-s0f9-e8d7c6b5a4', 'j1k2l3n5-o6p7-q8r9-s0t1-u2v3w4x5y6', 'k5l4m3o1-p0q9-r8s7-t6u5-v4w3x2y1z0', 'l6m7n8p0-q1r2-s3t4-u5v6-w7x8y9z0a1']
cancer_types
['IDC', 'DCIS', 'LCIS', 'ILC', 'TNBC', 'HER2_pos_breast_cancer', 'Follicular_lymphoma', 'Hodgkins_lymphoma', 'Non_Hodgkins_lymphoma', 'Cutaneous_melanoma', 'BCC', 'SCC', 'Osteogenic_sarcoma', 'Glioblastoma_multiforme', 'Leukaemia']
pediatric_renal_staging
['tumor_confined_kidney_with_distant_metastasis', 'tumor_confined_kidney_no_distant_metastasis', 'tumor_at_surgical_margin_or_regional_lymph_nodes_with_distant_metastasis', 'tumor_at_surgical_margin_or_regional_lymph_nodes_no_distant_metastasis', 'tumor_penetrates_renal_capsule_or_involves_renal_sinus_negative_margins_and_lymph_nodes_with_distant_metastasis', 'tumor_penetrates_renal_capsule_or_involves_renal_sinus_negative_margins_and_lymph_nodes_no_distant_metastasis', 'not_reported', 'tumor_biopsy_only_with_distant_metastasis', 'tumor_biopsy_only_no_distant_metastasis']
nucleotide_quality_score
['Failure', 'NR', 'Successful', 'NA', 'Warning']
base_seq_quality_score
['Failure', 'NR', 'Successful', 'NA', 'Warning', 'Warning', 'Successful', 'NA', 'Warning', 'Successful', 'NR', 'NA', 'Failure', 'Successful', 'NA']
seq_quality_score
['Failure', 'NR', 'Passed', 'NA', 'Warning']
gc_content_quality
['Failure', 'NR', 'Successful', 'NA', 'Warning']
seq_quality_status
['Failure', 'NR', 'Successful', 'NA', 'Warning']
Processed 440 columns
tile_seq_qual_status
['FAILURE', 'NR', 'SUCCESS', 'UNK', 'WARNING']
eosinophil_percent_infiltration
['2.5%', '7.8%', '12.3%', '0.9%', '15.4%', '9.7%', '3.2%', '5.6%', '11.1%', '8.4%', '4.3%', '6.9%', '13.7%', '1.8%', '10.2%']
follicular_ratio_percentage
['5.2%', '12.7%', '23.5%', '34.9%', '45.0%', '56.3%', '67.1%', '72.8%', '80.4%', '85.9%', '90.2%', '93.7%', '97.5%', '99.1%', '100%']
gc_content_pct
['forty_percent', 'forty_two_percent', 'forty_five_percent', 'forty_seven_percent', 'fifty_percent', 'fifty_two_percent', 'fifty_five_percent', 'fifty_seven_percent', 'sixty_percent', 'sixty_two_percent', 'sixty_five_percent', 'sixty_seven_percent', 'seventy_percent', 'seventy_two_percent', 'seventy_five_percent']
percent_neutrophil_infiltration
['2.5%', '7.8%', '12.3%', '15.0%', '20.5%', '25.7%', '30.1%', '35.4%', '40.0%', '45.2%', '50.6%', '55.8%', '60.3%', '65.7%', '70.9%']
tumor_inflam_infiltrate_pct
['12.5%', '23.8%', '7.2%', '34.9%', '45.3%', '9.1%', '15.4%', '28.7%', '56.2%', '3.5%', '62.8%', '18.9%', '47.1%', '5.6%', '70.4%']
tumor_lymphocyte_percentage
['2.5%', '7.8%', '12.3%', '15.0%', '18.2%', '21.4%', '25.7%', '29.9%', '33.3%', '37.5%', '40.0%', '45.2%', '48.6%', '52.1%', '55.5%']
monocyte_percentage_in_tumor
['2.5%', '7.8%', '12.3%', '4.6%', '9.1%', '15.4%', '3.2%', '11.7%', '6.5%', '8.9%', '13.6%', '5.3%', '10.2%', '14.8%', '1.9%']
tumor_necrosis_pct
['0.5%', '2.3%', '10%', '15.75%', '22.5%', '30%', '37.2%', '45%', '50.5%', '60%', '68.3%', '75%', '82.5%', '90%', '97.8%']
neutrophil_percentage_infiltrate
['2.5%', '5.0%', '7.8%', '10.3%', '12.1%', '15.4%', '18.6%', '20.0%', '23.5%', '26.8%', '30.2%', '33.7%', '37.9%', '40.5%', '45.0%']
Processed 450 columns
percent_viable_cells
['98.5%', '95.2%', '87.0%', '76.3%', '82.1%', '69.4%', '55.8%', '49.6%', '33.7%', '25.4%', '18.9%', '12.5%', '7.2%', '4.8%', '1.3%']
percent_rhabdoid_component
['none', 'minimal', 'low', 'moderate_low', 'moderate', 'moderate_high', 'high', 'very_high', 'extensive']
sarcomatoid_percentage
['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '65%', '70%']
stromal_cell_percentage
['5.2%', '12.8%', '23.4%', '7.9%', '33.1%', '18.5%', '9.7%', '26.3%', '40.0%', '15.6%', '21.9%', '4.4%', '29.7%', '36.2%', '11.0%']
tumor_cell_percentage
['0.5%', '2.3%', '5.0%', '7.8%', '10.4%', '15.2%', '20.0%', '25.5%', '30.3%', '40.0%', '50.7%', '60.5%', '70.2%', '80.0%', '90.8%']
tumor_invasion_percentage
['5.2%', '12.7%', '23.5%', '34.9%', '40.0%', '45.6%', '51.3%', '58.8%', '63.4%', '69.1%', '74.5%', '79.2%', '85.0%', '90.8%', '97.3%']
tumor_nuclei_percentage
['5.2%', '12.8%', '23.5%', '34.1%', '45.0%', '56.3%', '67.8%', '70.4%', '82.1%', '89.6%', '90.5%', '92.3%', '94.7%', '97.5%', '99.1%']
PNI_status
['Absent', 'NR', 'U', 'Present']
peripancreatic_LN_metastasis_count
['0', '1_to_3', '>3', 'NR', 'UNK']
peripancreatic_LN_examined
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'twelve', 'fourteen', 'sixteen', 'eighteen']
Processed 460 columns
peritoneal_fluid_cytology_result
['Atyp', 'Benign', 'Malign', 'NR', 'Unk', 'Inadequate', 'Atyp', 'Atyp', 'Atyp', 'Inadequate', 'Atyp', 'Atyp', 'Atyp', 'Atyp', 'Atyp']
peritoneal_cytology_status
['Neg', 'NR', 'Pos']
test_panel
['BRCA1_Seq_Analysis', 'LungCancer_Gene_Panel', 'Melanoma_BRAF_Mutation', 'Colon_KRAS_Mutation_Screen', 'Glioblastoma_IDH1_Mutation_Test', 'Leukemia_Flt3_Mutation_Analysis', 'Pancreatic_CDKN2A_Analysis', 'BreastCancer_HER2_Test', 'Ovarian_Cancer_Gene_Panel', 'ProstateCancer_AndrogenReceptor_Splice', 'Thyroid_BRAF_Mutation_Test', 'LiverCancer_AFP_Assay', 'Cervical_HPV_Genotyping', 'MultipleMyeloma_IgH_Rearrangement', 'SoftTissueSarcoma_TP53_Test']
well_id
['A1', 'B2', 'C3', 'D4', 'E5', 'F6', 'G7', 'H8', 'I9', 'J10', 'K11', 'L12', 'M13', 'N14', 'O15']
sequencing_technology
['Affy_SNP6', 'CG', 'Illumina_27K', 'Illumina_450K', 'Illumina_Epic', 'Ion_PGM', '454_Sequencing', 'Other_Technologies', 'SMRT', 'Protein_Arrays', 'Illumina_450K', 'Illumina_27K', 'Protein_Arrays', 'Affy_SNP6', 'Affy_SNP6']
sequencing_technologies
['HiSeq', 'GeneChip', 'PGM', 'MinION', 'NovaSeq', 'SureSelect', 'Chromium', 'Sequel', 'MiSeq', 'GS FLX', 'CytoScan', 'nCounter', 'NextSeq', 'FACSymphony', 'QuantStudio']
cell_ploidy_status
['Aneuploidy', 'Diploidy', 'Hyperdiploidy', 'Hypodiploidy', 'Near-diploidy', 'NR', 'Tetraploidy', 'Unknown', 'Near-diploidy', 'NR', 'NR', 'Near-diploidy', 'NR', 'Hyperdiploidy', 'Tetraploidy']
pubmed_id
['PMID_25468954', 'PMID_26786412', 'PMID_27830973', 'PMID_28954789', 'PMID_29567829', 'PMID_30541042', 'PMID_31298756', 'PMID_32098765', 'PMID_33289765', 'PMID_34567892', 'PMID_35678901', 'PMID_36789012', 'PMID_37890123', 'PMID_38901234', 'PMID_39012345']
sample_id
['S01', 'S02', 'S03', 'S04', 'S05', 'S06', 'S07', 'S08', 'S09', 'S10', 'S11', 'S12', 'S13', 'S14', 'S15']
daily_servings_intake
['0-1_servings', '2-3_servings', '4-5_servings', '6-7_servings', '8-9_servings', '10-11_servings', '12-13_servings', '14-15_servings', '16-17_servings', '18-19_servings', '20-21_servings', '22-23_servings', '24-25_servings', '26-27_servings', '28+_servings']
Processed 470 columns
parity_count
['nulliparous', 'primiparous', 'secundiparous', 'triparous', 'quadriparous', 'quintiparous', 'sextiparous', 'septiparous', 'octoparous', 'nonaparous', 'decaparous', 'undecaparous', 'dodecaparous', 'tridecaparous', 'tetradecaparous']
pregnancy_outcomes
['Tubal_Pregnancy', 'Termination_of_Pregnancy', 'Live_Birth', 'Pregnancy_Loss', 'NR', 'Miscarriage', 'Still_Birth', 'Unknown', 'Tubal_Pregnancy', 'NR', 'Termination_of_Pregnancy', 'Tubal_Pregnancy', 'Tubal_Pregnancy', 'Tubal_Pregnancy', 'NR']
pregnancy_status_at_dx
['No', 'NR', 'U', 'Y']
preterm_birth_status
['No', 'NR', 'U', 'Yes']
administered_dose
['50mg', '100mg', '150mg', '200mg', '250mg', '300mg', '350mg', '400mg', '450mg', '500mg', '550mg', '600mg', '650mg', '700mg', '750mg']
sample_storage_type
['Cryo', 'Ethylenediaminetetraacetic_acid', 'Formalin_Fixed_Paraffin_Embedded', 'Unfixed', 'Cryogenically_Frozen', 'Collection_Prohibited', 'Not_Disclosed', 'Optimal_Cutting_Temperature_compound', 'Rapidly_Frozen', 'No_Information', 'Collection_Forbidden']
primary_dx
['Meningioma', 'atypical', 'Metastatic carcinoma', 'ESS', 'GBM', 'Nevus', 'blue', 'Mantle cell lymphoma', 'Medulloblastoma', 'Mucinous borderline ovarian tumor', 'NF1', 'Mesonephric adenoma']
primary_diagnosis
['Yes', 'No', 'Positive', 'Negative']
gleason_score_primary
['G1', 'G2', 'G3', 'G4', 'G5']
cancer_site
['Anal_Canal', 'Central_Nervous_System', 'Mammary_Gland', 'Ocular', 'Oral_Cavity', 'NA', 'Female_Genital_Tract_NOS', 'Cutaneous', 'Urinary_Tract', 'External_Female_Genitalia', 'Female_Genital_Tract_NOS']
Processed 480 columns
previous_cancer_history
['Data_Not_Collected', 'absent', 'not_specified', 'unknown', 'present']
previous_treatment_status
['No', 'Data_Not_Collected', 'NR', 'Unknown', 'Yes']
proc_type
['DNA_seq_skipped', 'DNA_sequencing_omitted', 'DNA_analysis_bypassed', 'sequencing_not_performed']
medical_procedures
['Colorectal_Screening', 'Gastrointestinal_Scopy', 'NR', 'NA', 'Colorectal_Screening', 'Colorectal_Screening', 'NA', 'NA', 'NA', 'Gastrointestinal_Scopy', 'Gastrointestinal_Scopy', 'Gastrointestinal_Scopy', 'NA', 'NR', 'Gastrointestinal_Scopy']
cancer_research_areas
['Early Detection & Screening Programs', 'Cancer Immunotherapy Studies', 'Genetic Risk Assessment & Testing', 'End-of-Life Care Services', 'Childhood Cancer Research Initiatives', 'Mammography and Breast Health Education', 'Thoracic Oncology Studies', 'Studies on Prostate Health', 'Hematologic Cancer Investigations', 'Public Health & Cancer Prevention Strategies', 'Studies in Cancer Genetics', 'Advances in Radiotherapy', 'Surgical Approaches in Oncology', 'Post-Treatment Survivor Support', 'Diet & Recovery in Oncology']
disease_outcome_status
['No', 'Not_Collected', 'NR', 'Unknown', 'Yes']
metastasis_location
['Vestibulocochlear_nerve', 'Abdominal_soft_tissues', 'Bladder_dome', 'Biliary_bladder', 'Renal_NOS', 'Stomach_lesser_curvature_NOS', 'Cervical_lymph_nodes', 'Olfactory_bulb', 'Digestive_system_overlapping_lesion', 'Uterine_parametrium']
disease_progression_type
['Biochemical_Recurrence', 'Metastasis', 'Local_Recurrence', 'Regional_Recurrence', 'NR', 'Regional_Metastasis', 'Unknown', 'Biochemical_Recurrence']
research_focus_area
['Oncogene_Research_Initiatives', 'Immuno-oncology_Clinical_Trials', 'Anti-Metastatic_Strategies', 'Genomic_Analysis_of_Breast_Cancer', 'Lung_Cancer_Research_Projects', 'Melanoma_Genomics_Study', 'Early_Detection_of_Pancreatic_Cancer', 'Prostate_Cancer_Epidemiology', 'Leukemia_Resistance_Mechanisms', 'Glioblastoma_Treatment_Strategies', 'Colorectal_Cancer_Diagnostic_Advancements', 'Ovarian_Cancer_Marker_Research', 'Bladder_Cancer_Management_Strategies', 'Sarcoma_Molecular_Characterization', 'Thyroid_Cancer_Signaling_Pathways']
study_identifier
['CRS-2023-01_ALT', 'ONCO-GEN-09_ALT', 'MEL-TRIAL-2023_ALT', 'LUNG-CR-2022_ALT', 'BRCA-SEQ-21_ALT', 'PANCR-PROJ-20_ALT', 'GLIO-GS-19_ALT', 'LEUK-2023-STUDY_ALT', 'SKIN-CANCER-18_ALT', 'PROST-DETECT-17_ALT', 'COLON-CR-2023_ALT', 'HEMATO-ONC-16_ALT', 'SARCOMA-2022-RE_ALT', 'THYROID-RES-15_ALT', 'OVARIAN-2023-PR_ALT']
Processed 490 columns
research_topics
['Breast_Cancer_Genomics', 'Melanoma_Immunotherapy', 'Early_Lung_Cancer_Detection', 'Pancreatic_Cancer_Molecular_Research', 'Leukemia_Targeted_Treatment', 'Lymphoma_CAR-T_Therapy', 'Prostate_Cancer_Biomarkers', 'Ovarian_Cancer_Risk_Models', 'Colorectal_Cancer_Prevention', 'Pediatric_Cancer_Innovations', 'Glioblastoma_Therapies', 'Sarcoma_Genetics', 'Hepatocellular_Carcinoma_Monitoring', 'Thyroid_Cancer_Diagnostics', 'Renal_Cancer_Metastasis_Research']
base_mismatch_rate
['0.2%', '0.5%', '0.7%', '1%', '1.2%', '1.5%', '1.8%', '2%', '2.3%', '2.5%', '2.8%', '3%', '3.3%', '3.5%', '3.8%']
depth_coverage_10x_pct
['95%', '87%', '92%', '76%', '89%', '81%', '98%', '73%', '85%', '90%', '78%', '94%', '99%', '88%', '96%']
coverage_pct_30x_depth
['95%', '98%', '99%', '92%', '96%', '94%', '97%', '93%', '91%', '90%', '89%', '88%', '87%', '86%', '85%']
duplication_rate
['8%', '12%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '65%', '70%', '75%']
mapping_efficiency
['95%', '89%', '92%', '87%', '93%', '88%', '90%', '94%', '85%', '91%', '96%', '86%', '97%', '84%', '98%']
uncovered_target_ratio
['2%', '5%', '10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '65%', '70%']
prostate_biopsy_positive_cores
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'twelve', 'fifteen', 'eighteen', 'twenty']
prostate_biopsy_core_count
['twelve', 'eighteen', 'twenty_five', 'thirty', 'thirty_five', 'forty', 'forty_five', 'fifty', 'fifty_five', 'sixty', 'sixty_five', 'seventy', 'seventy_five', 'eighty', 'eighty_five']
prostate_involvement_pct
['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '75%', '90%']
Processed 500 columns
oncogene_markers
['ERBB2', 'ERBB1', 'CD274', 'BRCA1', 'BRCA2', 'PIK3CA', 'PTEN', 'ALK', 'KRAS', 'PDGFRA', 'CD20', 'MDM2', 'BCL2', 'MET', 'VEGFA']
study_id
['P321P2', 'NCT003881', 'NCT008605', 'NCT009340', 'ALL0031', 'ALL03B1', 'AML0631', 'ADVL0215', 'ANBL0322', 'CCG2961', 'NCT003881', 'ADVL0215', 'ALL0031', 'NCT008605', 'NCT009340']
ethnicity
['AI_AN', 'Asian', 'B_AA', 'NH_PI', 'NA', 'NR', 'Other', 'Unknown', 'White']
radiosensitizer_use
['Absent', 'NR', 'NA', 'Present']
radon_exp
['Absent', 'NR', 'Ukn', 'Present']
methylation_platforms
['Illumina_450K', 'Illumina_27K', 'Illumina_EPIC', 'Affymetrix_Tiling_2.0', 'Agilent_CpG_Island', 'NimbleGen_720K', 'CGH_Microarray', 'Illumina_Mouse_450K', 'Affymetrix_Promoter_1.0', 'NimbleGen_Mouse_385K', 'Agilent_Methyl-Seq', 'ONT_MinION', 'PacBio_SMRT', 'Bio-Rad_ddPCR', 'Qiagen_PyroMark']
sample_id
['RG001_PT_A_TMR', 'RG002_PT_A_NRM', 'RG003_PT_B_TMR', 'RG004_PT_B_NRM', 'RG005_PT_C_TMR', 'RG006_PT_C_NRM', 'RG007_PT_D_TMR', 'RG008_PT_D_NRM', 'RG009_PT_E_TMR', 'RG010_PT_E_NRM', 'RG011_PT_F_TMR', 'RG012_PT_F_NRM', 'RG013_PT_G_TMR', 'RG014_PT_G_NRM', 'RG015_PT_H_TMR']
read_group_metrics
['Avg_Base_Quality', 'Total_Read_Cnt', 'Mapped_Read_Cnt', 'Unmapped_Read_Cnt', 'Properly_Paired_Read_Cnt', 'Duplicate_Read_Cnt', 'Avg_Read_Length', 'GC_Percentage', 'Median_Insert_Size', 'Coverage_by_Read_Group', 'Pct_Q30_Bases', 'Adapter_Sequence_Content', 'Seq_Platform', 'Lib_Strategy', 'Read_Pair_Orient']
sequencing_platforms
['HiSeq_2500', 'PGM', 'MinION', 'RS_II', 'NovaSeq_6000', 'MiSeq', 'S5', 'Sequel', 'GAIIx', 'GridION', 'HiSeq_X', 'Proton', 'Sequel_II', 'iSeq_100', 'PromethION']
seq_length_bp
['50bp', '75bp', '100bp', '150bp', '200bp', '250bp', '300bp', '350bp', '400bp', '450bp', '500bp', '550bp', '600bp', '650bp', '700bp']
Processed 510 columns
read_pair_type
['NA', 'Read1', 'Read2', 'Read3']
treatment_outcome_reason
['AE', 'Treatment_Completion', 'Deceased', 'Progression', 'Other', 'Subject_Withdrawal', 'AE', 'AE', 'Other', 'Progression', 'Treatment_Completion', 'Deceased', 'AE', 'Deceased']
treatment_non_admin_reason
['Adverse_Events', 'Physician_Decision', 'Not_Reported', 'Patient_Refusal', 'Schedule_Issues', 'Unknown', 'Physician_Decision', 'Schedule_Issues']
lesion_count_recist
['single', 'double', 'triple', 'quadruple', 'quintuple', 'sextuple', 'septuple', 'octuple', 'nonuple', 'decuple', 'undecuple', 'duodecuple', 'tredecuple', 'quattuordecuple', 'quindecuple']
total_lesion_measurement_cm
['25mm', '48mm', '71mm', '93mm', '120mm', '154mm', '182mm', '215mm', '247mm', '289mm', '321mm', '356mm', '398mm', '432mm', '465mm']
GERD_treatment_category
['Antacid_Therapy', 'Histamine2_Receptor_Antagonists', 'Medical_Management', 'No_Intervention', 'NA', 'Data_Not_Provided', 'PPI_Therapy', 'Surgical_Intervention', 'Unknown_Status']
treatment_line_or_type
['1st_line_chemo', '2nd_line_chemo', 'adjuvant_chemo', 'neoadjuvant_chemo', 'palliative_chemo', 'maintenance_chemo', 'endocrine_therapy', 'immune_therapy', 'precision_medicine', 'radiotherapy', 'hematopoietic_stem_cell_transplantation', 'mAbs', 'combo_therapy', 'rescue_therapy', 'investigational_therapy']
associated_documents
['gene_expr_datasets.csv', 'demographic_info.xlsx', 'treatment_effects.pdf', 'genomic_variants.json', 'clinical_study_findings.docx', 'medical_imaging.dicom', 'histopathology_reports.zip', 'drug_response_data.tsv', 'outcome_analysis.R', 'genetic_markers.sql', 'survey_responses.sav', 'clinical_lab_results.csv', 'imaging_features.mat', 'immune_profiles.xml', 'public_health_data.mdb']
associated_data_types
['DNA_Sequence_Data', 'Pathology_Images', 'Clinical_Study_Findings', 'Informed_Consent_Documents', 'Magnetic_Resonance_Imaging', 'Computed_Tomography_Scans', 'Positron_Emission_Tomography_Scans', 'Hematology_Results', 'Genomic_Variation_Analysis', 'Treatment_Efficacy_Data', 'X-ray_Reports', 'Operative_Notes', 'IHC_Results', 'Chemotherapy_Results', 'Radiotherapy_Reports']
age_at_dx
['thirties', 'forties', 'fifties', 'twenties', 'sixties', 'seventies']
Processed 520 columns
sex_at_birth
['F', 'M', 'NR', 'UNK', 'UNSPEC']
primary_diagnosis_type
['Urothelial_Carcinoma', 'Brain_Cancer', 'Biliary_Cancer', 'HHV8-associated_Sarcoma', 'Myeloid_Leukemia', 'Hepatocellular_Carcinoma', 'Hodgkin_and_Non-Hodgkin_Lymphoma', 'Colorectal_Cancer', 'Oropharyngeal_Cancer', 'Nephroblastoma', 'Urothelial_Carcinoma', 'Myeloid_Leukemia', 'Nephroblastoma', 'Myeloid_Leukemia', 'Myeloid_Leukemia']
family_relationship_type
['Foster_Sibling', 'Full_Sibling', 'M_Great_Aunt', 'M_Half_Sister', 'Biological_Sister', 'Nephew', 'Sibling', 'Child', 'Monozygotic_Sibling', 'Not_Related', 'Not_Related', 'Foster_Sibling', 'Sibling', 'M_Great_Aunt', 'Sibling']
family_history_deceased
['No', 'NR', 'Yes']
family_smoking_status
['Non-smoker', 'Unknown', 'Smoker']
family_cancer_history
['absent', 'nr', 'unk', 'present']
family_cancer_history_count
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen']
is_public
['Yes', 'No', 'Y', 'N', '1', '0']
publication_date
['2023-Jan-15', '2023-Feb-20', '2023-Mar-05', '2023-Apr-10', '2023-May-25', '2023-Jun-30', '2023-Jul-15', '2023-Aug-20', '2023-Sep-05', '2023-Oct-10', '2023-Nov-25', '2023-Dec-30', '2024-Jan-15', '2024-Feb-20', '2024-Mar-05']
data_release_flag
['1', '0', 'Yes', 'No', 'Y', 'N']
Processed 530 columns
publication_status
['Published', 'Not_Published', 'Unreleased', 'Available', 'Not_Available']
submission_status
['Submitted', 'Not_Submitted', '1', '0']
surgical_margin_status
['NR', 'No_Residual_Tumor', 'Microscopic_Residual', 'Macroscopic_Residual', 'Not_Assessed', 'Unknown']
residual_disease_status
['R0_no_residual_tumor', 'R1_microscopic_residual', 'R2_macroscopic_residual', 'RX_cannot_be_assessed']
residual_tumor_size
['<10_mm', '10-20_mm', '>20_mm', 'No_macroscopic_disease']
RCS_exposure_status
['Absent', 'Not_reported', 'Present']
version_number
['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10', 'v11', 'v12', 'v13', 'v14', 'v15']
rhabdoid_tumor_percentage
['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '65%', '70%']
rhabdoid_feature
['Absent', 'NR', 'Present', 'Absent', 'Absent', 'Absent', 'Absent', 'Absent', 'Absent', 'Absent', 'Present', 'Present', 'Absent', 'Absent', 'Absent']
rRNA_28S_to_16S_ratio
['high', 'above_average', 'average', 'below_average', 'low']
Processed 540 columns
relative_immunonegativity_index
['10', '9.5', '8.7', '7.3', '6.5', '5.8', '4.9', '4.2', '3.6', '2.8', '2.1', '1.5', '1.9', '7.8', '9.2']
risk_factors
['Alcohol_Related_Liver_Disease', 'Food_Allergy', 'Hyperandrogenism', 'Chronic_Autoimmune_Gastritis', 'Familial_Ovarian_Cancer', 'Neurocysticercosis', 'RA', 'TB', 'Cryptorchidism', 'Cardiovascular_Disease', 'Familial_Ovarian_Cancer', 'Cardiovascular_Disease', 'Cardiovascular_Disease', 'Chronic_Autoimmune_Gastritis']
diagnosis_method
['Biochem_Assessment', 'Clinical_Biochem_Assessment', 'Clinical_Assessment', 'Not_Reported']
treatment_associated_risk
['Absent', 'NR', 'U', 'Present']
cancer_risk_factors
['Tobacco_use', 'Ethanol_use', 'Overweight', 'Hereditary_cancer_syndrome', 'Carcinogenic_exposure', 'Persistent_inflammation', 'Elderly', 'Saturated_fat_intake', 'Sedentary_lifestyle', 'Human_papillomavirus_infection', 'Ionizing_radiation', 'UV_exposure', 'Postmenopausal_hormone_use', 'Genetic_anomalies', 'Immune_system_suppression']
transcriptomics_techniques
['Bulk_Sequencing', 'scRNA_Sequencing', 'Spatial_Gene_Expression', 'Targeted_Sequencing', 'Long_read_Sequencing', 'RiboSeq', 'miRNA_Sequencing', 'Gene_Expression_Profiling', 'CLIP_Seq', 'Capture_Sequencing', 'Direct_RNA_Seq', 'T_Cell_Receptor_Sequencing', 'Gene_Chip_Technology', 'bDNA_Assay', 'MERFISH_Technology']
rna_quality_score
['perfect', 'excellent', 'very_good', 'good', 'above_average', 'average', 'slightly_below_average', 'below_average', 'poor', 'very_poor', 'critical', 'almost_degraded', 'degraded', 'highly_degraded', 'nearly_unusable']
cancer_cell_types
['Primary_tumor', 'Secondary_tumor', 'Tertiary_tumor', 'Quaternary_tumor', 'Metastasis', 'Basal_cell', 'Squamous_cell', 'Adenoma', 'Fibroma', 'Sarcoma', 'Lymphoma', 'Myeloma', 'Carcinoma', 'Melanoma', 'Neuroblastoma']
admin_route
['PO', 'IV', 'IM', 'SC', 'Top', 'Inhal', 'IP', 'IVes', 'TD', 'Rec', 'SL', 'IT', 'IA', 'IC', 'Nasal']
experimental_data_files
['aligned_reads.bam', 'qc_metrics.json', 'genomic_variants.vcf', 'gene_expression.tsv', 'gene_fusions.txt', 'dna_methylation.csv', 'cnv_data.bed', 'histone_marks.bedgraph', 'alternative_splicing.sam', 'sample_purity.txt', 'tcr_seq.fasta', 'gene_diff_expression.csv', 'protein_levels.txt', 'snp_genotyping.aff', 'gut_microbiota.fasta']
Processed 550 columns
sample_num
['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelfth', 'thirteenth', 'fourteenth', 'fifteenth']
sample_classification
['Benign_Tumors', 'Bone_Marrow_Cancer', 'Treatment_Follow-up', 'Circulating_Tumor_DNA', 'Healthy_Bone_Marrow', 'Healthy_Lymphoid', 'Uncertain_Neoplasms', 'Excluded_Sample', 'Pleural_Fluid', 'Post_Chemotherapy', 'Primary_Carcinoma']
specimen_type_code
['primary_tumor', 'recurrent_tumor', 'metastatic', 'primary_blood_derived', 'normal_tissue', 'normal_blood', 'cell_lines', 'xenograft', 'foreign_material', 'primary_tumor', 'primary_blood_derived', 'normal_tissue', 'metastatic', 'primary_blood_derived']
specimen_types
['Neoplastic_tissue_biopsy', 'Peripheral_blood_sample', 'Oral_fluid', 'Bone_marrow_sample', 'Pleural_effusion_fluid', 'Peritoneal_fluid', 'CSF', 'Urinary_sample', 'Fecal_sample', 'Cutaneous_biopsy', 'Hepatic_biopsy', 'Pulmonary_biopsy', 'Mammary_tissue', 'Lymphatic_tissue_biopsy', 'FNA_biopsy']
sarcomatoid_ratio
['none', 'minimal', 'low', 'moderate_low', 'moderate', 'moderate_high', 'high', 'very_high', 'extensive']
sarcomatoid_features
['Absent', 'Not_Available', 'Present']
satellite_lesion_status
['None', 'Uncertain', 'NR', 'Positive', 'Unknown']
radiotracer_type
['Ac', 'F-18 Fluciclovine', 'C-11 Choline', 'Prostate-Specific Membrane Antigen', 'F-18 NaF', 'F-18 NaF', 'F-18 NaF', 'F-18 NaF', 'F-18 NaF', 'F-18 NaF', 'F-18 Fluciclovine', 'F-18 NaF', 'C-11 Choline', 'F-18 NaF', 'C-11 Choline']
data_version
['1.0', '1.2.3', '2.0', '2.1', '3.0.5', '3.1.2', '4.0', '4.4.4', '5.0.1', '5.5.5', '6.0', '6.6.6', '7.0.3', '7.7.7', '8.0']
exon_2_position
['Ex2', 'Ex5', 'Ex8', 'Ex11', 'Ex14', 'Ex17', 'Ex20', 'Ex23', 'Ex26', 'Ex29', 'Ex32', 'Ex35', 'Ex38', 'Ex41', 'Ex44']
Processed 560 columns
alternative_gene_symbols
['ERBB3_HER3', 'FES_FPS', 'H3F3B_H3.3B', 'KCNJ5_GIRK4', 'KDM6A_UTX', 'LYL1_LYLF', 'PHF6_PHF6', 'PML_MYLM', 'SS18_SYT', 'ZMYM3_ZNF198']
molecular_characterization_techniques
['Gene_expression_analysis', 'Proteomics', 'miRNA_profiling', 'DNA_methylation_analysis', 'Epigenetic_modification_study', 'scRNA-seq', 'Protein_phosphorylation_analysis', 'Glycan_profiling', 'Metabolomics', 'Transcriptomics', 'Assay_for_transposase-accessible_chromatin_using_sequencing', 'Integrated_proteogenomics_analysis', 'Splice_variant_analysis', 'Tumor_mutational_load_analysis']
secondary_gleason_score
['Grade_1', 'Grade_2', 'Grade_3', 'Grade_4', 'Grade_5']
passive_smoking_exposure_in_childhood
['Absent', 'NR', 'U', 'Present', 'NR', 'U', 'Absent', 'NR', 'Absent', 'NR', 'NR', 'NR', 'NR', 'Absent', 'Absent']
tumor_site
['Mammary', 'Pulmonary', 'Colorectal', 'Prostatic', 'Pancreatic', 'Hepatic', 'Gastric', 'Esophageal', 'Vesical', 'Renal', 'Thyroidal', 'Cutaneous', 'Ovarian', 'Cervical', 'Cerebral']
normal_sample_low_quality_wgs
['Yes', 'No', '0', '1']
normal_tissue_genotyping
['Yes', 'No', 'Y', 'N', 'Positive', 'Negative', '1', '0']
normal_sample_included_wgs
['Included', 'Excluded', 'Yes', 'No', '1', '0']
normal_sample_wxs_selected
['Yes', 'No', '0', '1']
seq_duplication_rates
['Failure', 'NR', 'Passed', 'NA', 'Warning', 'NA', 'NA', 'Passed', 'NA', 'NA', 'NA', 'Warning', 'Failure', 'Failure', 'NR']
Processed 570 columns
seq_len_dist_quality
['Failure', 'NR', 'Pass', 'Unknown', 'Warning']
sequencing_facility
['Broad Inst', 'Genentech Inc', 'Illumina Inc', 'NCI', 'MDACC', 'Mayo Genomics Core', 'MSKCC', 'Sanger Inst', 'BGI', 'EMBL', 'JHU Genomics', 'DFCI', 'Crick Inst', 'CSHL', 'HudsonAlpha Inst']
sample_date
['2021-Mar-15', '2021-Jul-22', '2021-Nov-30', '2022-Jan-20', '2022-Apr-05', '2022-Jun-18', '2022-Sep-09', '2022-Dec-01', '2023-Feb-14', '2023-May-07', '2023-Jul-21', '2023-Aug-30', '2023-Oct-12', '2023-Nov-05', '2023-Dec-20']
institution_acronym
['UTMDACC', 'DANA-FARBER', 'SLOAN KETTERING', 'JOHNS HOPKINS', 'UCLA HEALTH', 'UCSF HEALTH', 'MASS GENERAL', 'NATIONAL CANCER INSTITUTE', 'FRED HUTCH', 'SEATTLE CANCER CARE ALLIANCE', "BRIGHAM WOMEN'S", 'UPMC HILLMAN', 'COLD SPRING HARBOR', 'LEVINE CANCER INSTITUTE', 'VICTORIAN COMPREHENSIVE CANCER CENTRE']
min_dimension
['2.5_cm', '1.2_cm', '3.8_cm', '0.9_cm', '4.4_cm', '1.7_cm', '2.9_cm', '5.1_cm', '0.5_cm', '3.3_cm', '6.0_cm', '1.4_cm', '2.2_cm', '4.7_cm', '0.7_cm']
germline_mutations
['BRCA1_var', 'BRCA2_var', 'TP53_var', 'MLH1_var', 'MSH2_var', 'APC_var', 'PTEN_var', 'ATM_var', 'CHEK2_var', 'PALB2_var', 'PMS2_var', 'STK11_var', 'CDH1_var', 'NF1_var', 'RB1_var']
genomic_alterations
['TP53_mut', 'KRAS_mut', 'EGFR_mut', 'BRAF_V600E_mut', 'PIK3CA_mut', 'PTEN_del', 'CDKN2A_inact', 'APC_mut', 'MET_amp', 'HER2_amp', 'IDH1_R132H_mut', 'NPM1_mut', 'FLT3_ITD', 'VHL_inact', 'BCR_ABL_fus']
single_cell_technology
['Chromium_3p_GEX_v2', 'Chromium_3p_GEX_v3', 'Chromium_scATAC_seq_v1', 'SmartSeq2']
anatomic_site_of_origin
['Gastroesophageal_junction', 'Not_Otherwise_Specified', 'Hypopharynx_aryepiglottic_fold', 'Mandibular_gingiva', 'Lower_extremity', 'Not_Otherwise_Specified', 'Larynx_supraglottic', 'Thymus_gland', 'Colon_transverse', 'Urachus', 'Adnexa_uteri', 'Palatine_uvula', 'Larynx_supraglottic', 'Not_Otherwise_Specified', 'Colon_transverse']
metastasis_locations
['Lymphatic_system', 'Hepatic', 'Pulmonary', 'Osseous', 'Cerebral', 'Suprarenal_glands', 'Peritoneal', 'Cutaneous', 'Pleural', 'Renal', 'Splenic', 'Pancreatic', 'Ovarian', 'Vesical', 'Thyroidal']
Processed 580 columns
num_sites_involved
['single', 'double', 'triple', 'quadruple', 'quintuple', 'sextuple', 'septuple', 'octuple', 'nonuple', 'decuple', 'undecuple', 'duodecuple', 'tredecuple', 'quattuordecuple', 'quindecuple']
extranodal_mass_size_cm
['2.5_cm', '4.1_cm', '3.7_cm', '1.8_cm', '5.2_cm', '6.0_cm', '0.9_cm', '7.3_cm', '8.8_cm', '2.2_cm', '4.6_cm', '3.3_cm', '5.9_cm', '1.4_cm', '7.0_cm']
particle_size_distribution
['<10nm', '10-30nm', '31-50nm', '51-100nm', '101-150nm', '151-200nm', '201-250nm', '251-300nm', '301-350nm', '351-400nm', '401-450nm', '451-500nm', '501-550nm', '551-600nm', '>600nm']
histopathology_images
['Hematoxylin_and_Eosin_stained_lung_cancer', 'IF_labeled_breast_cancer', 'Pap_stain_cervical_cancer', 'Masson_trichrome_stained_liver_cancer', 'Giemsa_stained_leukemia_cells', 'PAS_stained_colorectal_cancer', 'Oil_Red_O_stained_liposarcoma', 'Wright_stained_multiple_myeloma', 'Silver_impregnation_neuroendocrine_tumor', 'Alcian_blue_stained_pancreatic_cancer', 'Congo_red_stained_amyloidosis_in_myeloma', 'Toluidine_blue_stained_mastocytoma', 'Mucicarmine_stained_adenocarcinoma', 'Fontana_Masson_stained_melanoma', 'Orcein_stained_hepatoma']
slide_types
['Hematoxylin_and_eosin_stain', 'IF_staining', 'Cryostat_section', 'FFPE', 'Terminal_deoxynucleotidyl_transferase_dUTP_nick_end_labeling', 'Pap_stain', 'May-Grunwald-Giemsa_stain', 'IHC', 'FISH_technique', 'Cryosections', 'PAS_stain', 'Trichrome_stain', 'Argentaffin_stain', 'AO_staining', 'Wright-Giemsa_stain']
smoking_status
['Daily', 'Occasionally', 'Not_reported']
somatic_variant_calling_methods
['MuTect2', 'VarScan2', 'Strelka2', 'GATK4_Mutect2', 'SomaticSniper', 'LoFreq', 'Platypus_variant_caller', 'DeepVariant', 'Pindel', 'TN_pair_analysis', 'SomaticSeq', 'FACETS_copy_number', 'PureCN', 'MSIsensor_microsatellite', 'GATK_HaplotypeCaller']
somatic_variant_callers
['MuTect2', 'Strelka2', 'VarScan2', 'SomaticSniper', 'GATK_Mutect2', 'LoFreq', 'SiNVICT', 'VarScan2_SNP', 'VarScan2_Indel', 'Pindel', 'TN_Pairing_Analysis', 'Haplotype_Caller', 'SomaticSeq', 'DeepVariant', 'Platypus']
CNV_analysis_methods
['GISTIC_2', 'ABSOLUTE', 'FACETS', 'TITAN', 'CNV_kit', 'VarScan_2', 'CopywriteR', 'BIC_seq2', 'Control_FREEC', 'Sequenza', 'XHMM', 'PURPLE', 'ASCAT', 'PyClone', 'SCHISM']
cancer_variant_calling_methods
['MuTect2_GATK', 'VarScan2', 'Strelka2', 'GATK_Mutect2', 'SomaticSniper', 'LoFreq', 'Pindel', 'DeepVariant', 'Platypus', 'TN_Pairing', 'GATK_HaplotypeCaller', 'FreeBayes', 'Manta', 'DELLY', 'GRIDSS']
Processed 590 columns
gene_variant_codes
['G12D_KRAS', 'R175H_TP53', 'V600E_BRAF', 'L858R_EGFR', 'E545K_PIK3CA', 'T102*_PTEN', 'R876*_APC', 'S45F_CTNNB1', 'E1202K_ALK', 'S310F_ERBB2', 'D1228N_MET', 'Q61R_NRAS', 'W110*_CDKN2A', 'FLT3_internal_tandem_duplication', 'V617F_JAK2']
molecular_diagnostics_tests
['Telomerase_Activity_Test', 'CTC_Analysis', 'MSI_Testing', '3C_Technique', 'TMB_Testing', 'cfDNA_Analysis', 'PTT', 'LOH_Testing', 'Gene_Expression_Analysis', 'ctDNA_Methylation_Testing', 'RNA_Splicing_Test', 'ncRNA_Assessment', 'dPCR_for_Mutation_Detection', 'Phosphoprotein_Profiling', 'TMA_analysis']
sample_type
['Organoid_Cultures', 'Cell_Lines', 'FACS_Sorted_Cells', 'Myeloid_Cells', 'Cell_Culture_Suspension', 'Adherent_Suspension_Culture', 'Monocytes_BM', 'Blood_Plasma', 'Blood_Serum', 'Tissue_Sample', 'FACS_Sorted_Myeloid_Cells', 'Myeloid_Cell_Suspension', 'Tissue_Block', 'Organotypic_Cultures']
protein_quantification_method
['UV-Visible_Spectroscopy', 'NanoDrop_Spectrophotometer', 'Qubit', 'BioSpectrometer_Kinetic', 'Microvolume_Protein_Quantitation', 'Coomassie_Blue_Assay', 'Bicinchoninic_Acid_Assay', 'Lowry_Protein_Assay', 'Biophotometer_Plus', 'DirectDetect', 'Fluorometry', 'Colorimetric_Protein_Assay', 'SpectraMax_Plate_Reader', 'DU_800', 'Epoch']
spike_ins_conc
['500 pM', '1000 pM', '2500 pM', '5000 pM', '10000 pM', '20000 pM', '50000 pM', '100000 pM', '200000 pM', '500000 pM', '1 uM', '2.5 uM', '5 uM', '10 uM', '20 uM']
control_sequences_fasta
['ERCC.fasta', 'SIRV.fasta', 'PhiX.fasta', 'pUC.fasta', 'Lambda.fasta', 'MS2.fasta', 'VirusMix.fasta', 'A.lyrata_SpikeIns.fasta', 'Yeast_tRNA.fasta', 'Human_rRNA.fasta', 'Drosophila_Spike.fasta', 'C.elegans_miRNA.fasta', 'BSA.fasta', 'Synth_Oligos.fasta', 'Custom_Fragments.fasta']
spindle_cell_percentage
['5.2%', '12.8%', '23.4%', '7.9%', '34.1%', '45.5%', '16.7%', '29.3%', '38.6%', '9.4%', '51.2%', '60.8%', '18.5%', '27.7%', '43.9%']
stain_method
['H_and_E', 'IHC']
immunohistochemistry_score
['Low', 'Moderate', 'High', 'Very High']
immunohistochemistry_score
['neg', 'weak', 'moderate', 'strong', 'very_strong']
Processed 600 columns
data_status
['invalid', 'deprecated', 'checksum_in_progress', 'completed', 'available', 'under_evaluation', 'received', 'stored', 'in_transfer', 'confirmed', 'available', 'completed', 'completed', 'confirmed']
sample_issue_desc
['Contaminated_sample', 'Low_volume', 'Consent_retracted', 'Low_data_quality', 'Lost_sample', 'Labeling_error', 'Equipment_failure', 'Degraded_sample', 'Incomplete_data', 'Ethical_approval_awaited', 'Sequencing_mistake', 'Suspected_mix-up', 'Foreign_DNA_contamination', 'Transportation_delay', 'Data_entry_error']
approval_status
['Authorized', 'Revoked', 'Authorized', 'Revoked', 'Revoked', 'Authorized', 'Authorized', 'Authorized', 'Authorized', 'Authorized', 'Authorized', 'Authorized', 'Authorized', 'Authorized', 'Authorized']
sv_detection_methods
['MantaSV', 'DellySV', 'GRIDSS', 'LUMPYSV', 'SvABASV', 'BreakDancerSV', 'VarScan2SV', 'PindelSV', 'CNVnator', 'Strelka2SV', 'GATKSV', 'TIDDITSV', 'WHAMSV', 'MoChA', 'FusionCatcher']
genomic_alterations
['Del', 'Dup', 'Transloc', 'Inv', 'Ins', 'CNV', 'Tandem_dup', 'Interchrom_rearrangements', 'Intrachrom_rearrangements', 'LOH', 'Amp', 'Point_mut', 'Chromothripsis', 'Chromoplexy', 'Ring_chr']
submission_status
['Enabled', 'Disabled', 'Not_Applicable']
sequencing_data_files
['Tumor_Sample1_Read1.fastq.gz', 'Tumor_Sample1_Read2.fastq.gz', 'Normal_Sample1_Read1.fastq.gz', 'Normal_Sample1_Read2.fastq.gz', 'Tumor_Sample2_Read1.fastq.gz', 'Tumor_Sample2_Read2.fastq.gz', 'Normal_Sample2_Read1.fastq.gz', 'Normal_Sample2_Read2.fastq.gz', 'Metastatic_Sample1_Read1.fastq.gz', 'Metastatic_Sample1_Read2.fastq.gz', 'Tumor_Sample3_Read1.fastq.gz', 'Tumor_Sample3_Read2.fastq.gz', 'Normal_Sample3_Read1.fastq.gz', 'Normal_Sample3_Read2.fastq.gz', 'Metastatic_Sample2_Read1.fastq.gz']
genomic_alterations_detected
['BRCA1_mutational_analysis', 'TP53_mutation_screening', 'EGFR_del19', 'KRAS_G12C_variant_identification', 'ALK_translocation_analysis', 'HER2_gene_amplification', 'PIK3CA_mutational_spectrum', 'PD-L1_level_measurement', 'NTRK_fusion_detection', 'MMR_status_assessment', 'CDKN2A_inactivation_study', 'BCR_ABL_fusion_detection', 'MET_skip_mutations', 'VHL_mutation_analysis', 'IDH1_R132H_variant_screening']
genotyping_platforms
['Affymetrix SNP 6.0 Array', 'Illumina OmniExpress', 'Agilent G3 CGH+SNP', 'Illumina Omni2.5-8 Infinium', 'Affymetrix CytoScan Array', 'Illumina HumanHap 550', 'Thermo Fisher OncoScan CNV', 'Illumina GSA', 'Affymetrix 250K Nsp/Sty', 'Illumina Exome Array', 'Agilent CGH+SNP Microarray', 'Illumina MethylationEPIC', 'Affymetrix Axiom PanAFR', 'Illumina HiSeq', 'Thermo Fisher QuantStudio 3D Digital PCR']
methylation_level_beta_values
['0.856', '0.342', '0.675', '0.123', '0.908', '0.457', '0.289', '0.631', '0.774', '0.211', '0.598', '0.483', '0.369', '0.822', '0.945']
Processed 610 columns
cnv_ratios
['gain', 'normal', 'slight_loss', 'gain', 'loss', 'normal', 'gain', 'slight_gain', 'normal', 'slight_loss', 'gain', 'loss', 'high_gain', 'slight_loss']
unaligned_reads_bams
['SRR1234567_unaligned.bam', 'SRR7654321_unaligned.bam', 'SRR2345678_unaligned.bam', 'SRR8765432_unaligned.bam', 'SRR3456789_unaligned.bam', 'SRR9876543_unaligned.bam', 'SRR4567890_unaligned.bam', 'SRR0987654_unaligned.bam', 'SRR5678901_unaligned.bam', 'SRR1098765_unaligned.bam', 'SRR6789012_unaligned.bam', 'SRR2109876_unaligned.bam', 'SRR7890123_unaligned.bam', 'SRR3210987_unaligned.bam', 'SRR8901234_unaligned.bam']
participant_identifier
['BGX23_SA', 'OLab45_TB', 'CP9_PC', 'TT67_RD', 'CQ33_SE', 'GM21_TF', 'MC55_PG', 'NG88_RH', 'OG12_SI', 'PG77_TJ', 'CC41_PK', 'TM66_RL', 'BM53_SM', 'CS11_TN', 'IP22_PO']
brain_tumor_location
['Cerebrum', 'Basal_ganglia', 'Frontal_lobe', 'NR', 'Occipital_lobe', 'Parietal_lobe', 'Spinal_cord', 'Temporal_lobe', 'UNK', 'White_matter', 'NR', 'Thalamus', 'UNK', 'Spinal_cord']
concurrent_malignancy
['No', 'NR', 'U', 'Yes']
research_topics
['Proto-oncogene_Activation', 'Antioncogenes', 'Cancer_Immunotherapy', 'Drug_Resistance', 'Radiotherapy', 'Cancer_Spread', 'Neoangiogenesis', 'Tumorigenesis', 'Targeted_Therapy', 'Endocrine_Treatment', 'Pluripotent_Stem_Cell_Study', 'DNA_Mutations', 'Programmed_Cell_Death', 'Self-Digestion', 'Cell_Proliferation_Disorder']
gene_panel_id
['GENIE_DFCI_447', 'MSK_IMPACT_468', 'PGDX_CancerSelect_203', 'SeqCap_VCRome_v2.1', 'SureSelect_CGCI_BLGSP_4.6Mb', 'SureSelect_Exon_v1.1_3Boosters', 'Twist_Broad_PanCancer_396', 'Nextera_Exome', 'SureSelect_Exon_v4', 'TruSeq_Cancer_Panel']
exon_capture_kit_id
['TC1001-SureZyme', 'TCK2580-GeneLock', '5002-OncoTarget', 'KitX9-BioPrime', 'CM300-CaptureMax', 'CTK420-SeqPure', 'TF500-TargetFlex', 'GGK700-GeneGuide', '9000TC-PureSeq', 'OC100-OncoCapture', 'PTK200-PrimeTarget', 'CS500-CaptureSelect', 'TGK850-TargetGen', 'PCX500-PureCapture', 'ST100-SeqTarget']
exome_capture_kit
['SureSelect All Exon V6', 'TruSeq Exome', 'SeqCap EZ Exome v3', 'SureSelect XT All Exon V7', 'AmpliSeq Exome', 'Rapid Capture Exome', 'Core Exome', 'SeqCap EZ MedExome', 'Clinical Research Exome', 'TruSight One Panel', 'AmpliSeq CCP', 'QIAseq Exome', 'NEBNext Direct CHSP', 'xGen Exome', 'VariantPlex,']
exome_capture_kit
['Agilent_SureSelect_All_Exon_V6', 'Illumina_TruSeq_Exome', 'Roche_NimbleGen_SeqCap_EZ_Exome_v3', 'Agilent_SureSelect_XT_All_Exon_V7', 'ThermoFisher_Ion_AmpliSeq_Exome', 'Illumina_Nextera_Exome', 'Twist_Bioscience_Core_Exome', 'Roche_SeqCap_EZ_MedExome', 'Agilent_SureSelect_CRE', 'Illumina_TruSight_One', 'IDT_xGen_Exome_Research_v1.0', 'Roche_NimbleGen_SeqCap_EZ_Exome_v2.0', 'Agilent_SureSelect_Focused_Exome', 'ThermoFisher_Ion_Torrent_AmpliSeq_CCP', 'Illumina_TruSeq_Custom_Enrichment']
Processed 620 columns
seq_capture_kit_manufacturer
['Agilent', 'Roche', 'Illumina', 'ThermoFisher', 'IDT', 'Qiagen', 'OGT', 'BGI', 'Twist', 'PacificBiosciences', 'NEB', 'PerkinElmer', 'BioRad', 'Merck', 'GenScript']
exome_capture_technology
['SureSelectXT_Human_All_Exon_6', 'TruSeq_Exome_v3', 'SeqCap_EZ_Exome_v3', 'SureSelectXT2_Human_All_Exon_7', 'Nextera_Rapid_Capture_Exome_v1.2', 'Twist_Core_Exome', 'AmpliSeq_Exome_v5', 'xGen_Exome_Panel_v1.5', 'NEBNext_Direct_Cancer_Panel_v2.1', 'SureSelect_Clinical_Exome_V2', 'TruSight_One_Panel', 'SeqCap_EZ_MedExome', 'SureSelect_Human_All_Exon_8', 'Nextera_Flex_Enrichment', 'AmpliSeq_HD_Custom_Panels']
biomarker_type
['Deoxyribonucleic_Acid', 'NR', 'Protein', 'Ribonucleic_Acid', 'Unknown', 'Messenger_RNA', 'MicroRNA']
biomarker_status
['Aberrant', 'Not Specified', 'Overexpressed', 'Increased', 'Elevated', 'Moderate', 'Within Normal Limits', 'Not Overexpressed', 'Detected', 'Quantitative Measure Available', 'Moderate', 'Within Normal Limits', 'Quantitative Measure Available', 'Elevated']
alternative_measurement_units
['Not_Reported', 'ug/gHb', 'U/mL', 'cells_per_mL', 'g/L', 'g/dL', 'mg_per_24hr', 'mg/L', 'mg/dL', 'mm_squared', 'g/dL', 'mm_squared', 'mg/dL', 'cells_per_mL', 'g/dL']
biomarker_level
['2.5_ng/mL', '7.8_ng/mL', '0.1_ng/mL', '15.3_ng/mL', '4.6_ng/mL', '9.9_ng/mL', '1.2_ng/mL', '3.4_ng/mL', '8.7_ng/mL', '5.5_ng/mL', '11.0_ng/mL', '6.3_ng/mL', '12.8_ng/mL', '0.5_ng/mL', '10.4_ng/mL']
tumor_marker_percentage_range
['0-25', '26-50', '10-19', '20-29', '30-39', '40-49', '51-75', '76-100', '<1', 'Not_Reported']
treatment_options
['A2A Receptor/Phosphodiesterase-10A Inhibitor PBF-999', 'XmAb2513', 'CD70-targeted CAR-T Cells', 'MAGE-A4-specific CD8alpha T Cells', 'Nectin-4/FAP CAR-T Cells', 'CDK4/6 Inhibitor BPI-16350', 'Cetuximab', 'CD40 Agonist Antibody 2141-V11', 'Fosgemcitabine', 'Tebentafusp']
treatment_efficacy_achieved
['Achieved', 'Not_Achieved', 'Yes', 'No']
treatment_efficacy_achieved
['Absent', 'NR', 'U', 'Present', 'Present', 'Absent', 'U', 'Present', 'Absent', 'Absent', 'U', 'NR', 'NR', 'Absent', 'Absent']
Processed 630 columns
therapeutic_target_concentration
['>14_mg_per_L', 'above_14_mg/L', '>14_milligrams_per_liter']
ischemia_time_min
['2_minutes', '5_minutes', '7_minutes', '10_minutes', '12_minutes', '15_minutes', '18_minutes', '21_minutes', '24_minutes', '27_minutes', '30_minutes', '35_minutes', '40_minutes', '45_minutes', '50_minutes']
excision_to_freezing_duration_min
['5_min', '10_min', '15_min', '20_min', '25_min', '30_min', '35_min', '40_min', '45_min', '50_min', '55_min', '60_min', '1.5_hours', '2_hours', '3_hours']
time_to_first_cigarette
['31-60_min', '6-30_min', '>60_min', 'not_reported', '<=5_min']
treatment_phase
['Adj_Therapy', 'End_Consol_Therapy', 'End_Treat_Course_2', 'Follow_up', 'Not_Reported', 'Other', 'Post_Horm_Therapy', 'Preop', 'Pre_Treatment', 'Post_Surgery_3M', 'Adj_Therapy', 'Other', 'Adj_Therapy', 'Adj_Therapy', 'Post_Surgery_3M']
sample_collection_method
['Prospective_Collection', 'Retrospective_Collection']
tma_coords
['A01-1', 'B02-5', 'C03-10', 'D04-15', 'E05-20', 'F06-25', 'G07-30', 'H08-35', 'I09-40', 'J10-45', 'K11-50', 'L12-55', 'M13-60', 'N14-65', 'O15-70']
primary_site
['Epiglottis_anterior_surface', 'Anal_canal', 'Ciliary_body', 'Lip_external', 'Gall_bladder', 'Respiratory_system_ill_defined', 'NR', 'Urinary_organs_overlapping_lesion', 'Bladder_posterior_wall', 'Bones_of_thorax', 'Anal_region']
sample_origin_sites
['Pulmonary', 'Mammary', 'Colorectal', 'Pancreatic', 'Prostatic', 'Ovarian', 'Hepatic', 'Cutaneous', 'Renal', 'Cerebral', 'Gastric', 'Esophageal', 'Thyroidal', 'Vesical', 'Cervical']
sample_type
['Aberrant', 'Healthy', 'NA', 'NR', 'Adjacent_to_Tumor', 'Neoplastic', 'Not_Determined', 'ND', 'ND', 'ND', 'NR', 'Adjacent_to_Tumor', 'Neoplastic', 'Aberrant', 'Adjacent_to_Tumor']
Processed 640 columns
adapter_seq_trim_flag
['Yes', 'No', '0', '1']
smoking_initiation_year
['Y1970', 'Y1982', 'Y1995', 'Y1965', 'Y2001', 'Y1988', 'Y1975', 'Y1990', 'Y2005', 'Y1978', 'Y1985', 'Y1999', 'Y1968', 'Y2008', 'Y1980']
smoking_cessation_year
['1985', '1990', '1995', '2000', '2005', '2010', '2012', '2014', '2016', '2018', '2019', '2020', '2021', '2022', '2023']
smoking_status
['2:Former_Smoker_<15yrs', '3:Active_Smoker', '4:Data_Not_Collected', '5:Status_Unknown', '6:Not_Reported', '7:Never_Smoked']
total_seq_reads
['1e5', '2.5e5', '5e5', '7.5e5', '1e6', '1.25e6', '1.5e6', '1.75e6', '2e6', '2.25e6', '2.5e6', '2.75e6', '3e6', '3.25e6', '3.5e6']
total_seq_count
['one_k_two_four', 'two_k_fifty_six', 'five_k_one_two_zero', 'seven_hundred_sixty_eight', 'fifteen_k', 'twenty_three_k_four_five_six', 'four_k_ninety_six', 'eight_k_one_ninety_two', 'sixteen_k_three_eighty_four', 'thirty_two_k_seven_sixty_eight', 'sixty_five_k_five_thirty_six', 'one_hundred_twenty_eight', 'two_hundred_fifty_six', 'forty_nine_k_one_fifty_two', 'ninety_eight_k_three_oh_four']
gene_transcript_id
['ENST00000367770', 'NM_007294', 'NM_000546', 'NM_005157', 'ENST00000269305', 'NM_004333', 'NM_002524', 'ENST00000445888', 'NM_000059', 'NM_004360', 'NM_001005862', 'ENST00000557334', 'NM_000314', 'NM_001256849', 'NM_017617']
transglottic_involvement
['None', 'NR', 'Positive', 'NA']
treatment_site
['Axillary', 'Cerebellar', 'CSF', 'Cardiac', 'Mandibular', 'Occipital_Lymph_Nodes', 'Ungual', 'Penile', 'Popliteal_Space', 'Scrotal']
treatment_sites
['Mammary', 'Pulmonary', 'Prostatic', 'Colorectal', 'Cerebral', 'Hepatic', 'Pancreatic', 'Ovarian', 'Cutaneous', 'Cervical', 'Esophageal', 'Gastric', 'Vesical', 'Renal', 'Osseous']
Processed 650 columns
treatment_protocol_id
['A081105_ALT', 'A081801_ALT', 'E4512_ALT', 'EA5142_ALT']
dose_mg
['0.1g', '0.2g', '0.3g', '0.4g', '0.5g', '0.6g', '0.7g', '0.8g', '0.9g', '1g', '1.2g', '1.4g', '1.6g', '1.8g', '2g']
max_dose_administered
['50mg', '100mg', '150mg', '200mg', '250mg', '300mg', '350mg', '400mg', '450mg', '500mg', '550mg', '600mg', '650mg', '700mg', '750mg']
dosage_units
['IU_per_kg', 'grams_per_day', 'milliliters', 'milligrams', 'milligrams_per_deciliter', 'milligrams_per_day', 'milligrams_per_kilogram', 'milligrams_per_square_meter', 'milligrams_per_milliliter', 'milligrams_per_week']
treatment_length_days
['4_weeks', '6.5_weeks', '8.5_weeks', '13_weeks', '17_weeks', '21_weeks', '30_weeks', '34_weeks', '38_weeks', '43_weeks', '47_weeks', '52_weeks', '57_weeks', '61_weeks']
treatment_response
['Complete_Response', 'Partial_Response', 'No_Response', 'No_Effect', 'Not_Evaluated', 'Data_Missing', 'Partial_Response', 'No_Effect', 'No_Effect', 'No_Effect', 'Data_Missing', 'No_Effect', 'Data_Missing', 'Data_Missing', 'No_Response']
treatment_response
['No', 'NR', 'Unknown', 'Yes']
dosage_interval
['q24h', 'q1h', 'qod', 'qid', 'qid', 'qw', 'qw_for_1yr', 'bid', 'biw', 'unknown', 'qw', 'unknown', 'unknown', 'qw', 'qw']
treatment_purpose
['Adjuvant_Therapy', 'Hormone_Therapy', 'Maintenance_Therapy', 'Primary_Therapy', 'Preparatory_Therapy', 'Not_Applicable', 'Prophylaxis', 'Boost_Irradiation', 'Not_Specified']
treatment_status
['no_treatment', 'not_specified', 'data_missing', 'treatment_given']
Processed 660 columns
treatment_response
['CR_Complete_Response', 'MR_Mixed_Response', 'NMD_No_Measurable_Disease', 'NR_No_Response', 'NTM_Normalization_of_Tumor_Markers', 'PD_Persistent_Disease', 'TO_Treatment_Ongoing', 'TSDT_Treatment_Stopped_Due_to_Toxicity', 'U_Unknown', 'VGPR_Very_Good_Partial_Response']
treatment_response_duration_days
['1.5_months', '3_months', '4_months', '6_months', '7_months', '8_months', '9_months', '10_months', '11_months', '12_months', '13_months', '14_months', '15_months', '16_months', '17_months']
therapy_type
['Anticonvulsant_Therapy', 'Excisional_Biopsy', 'Double-blind_Trial', 'Unknown_Therapy', 'Intracavitary_Radiotherapy', 'External_Beam_Radiation_Low_Dose', 'Radioiodine_Therapy', 'Cancer_Immunotherapy', 'External_Beam_Radiation_3D', 'Systemic_Radioisotope_Therapy', 'Radiomodification_Therapy', 'Hematopoietic_Stem_Cell_Transplantation']
cancer_treatment_methods
['Chemo', 'X-ray therapy', 'Immune therapy', 'Endocrine therapy', 'Molecularly targeted therapy', 'Surgical removal', 'Hematopoietic stem cell transplantation', 'Cryosurgery', 'Thermal therapy', 'PDT', 'Laser ablation', 'RFA', 'Proton beam therapy', 'T-cell transfer therapy', 'Biological therapy']
tumor_load
['0.5_cm3', '1.2_cm3', '2.4_cm3', '3.8_cm3', '5.0_cm3', '6.3_cm3', '7.1_cm3', '8.5_cm3', '9.9_cm3', '11.2_cm3', '12.8_cm3', '14.4_cm3', '16.0_cm3', '18.5_cm3', '20.7_cm3']
disease_type
['ALAL', 'AML', 'CNS_ependymoma', 'CNS_medulloblastoma', 'CNS_other', 'ALCL', 'RT_kidney', 'RMS', 'STS_non-RMS', 'WT']
cancer_type_code
['carcinoma', 'sarcoma', 'leukemia', 'lymphoma', 'melanoma', 'glioma', 'neuroblastoma', 'myeloma', 'adenocarcinoma', 'squamous_cell_carcinoma']
organ_confined_status
['N', 'NR', 'U', 'Y']
tumor_thickness
['1.2_mm', '3.5_mm', '0.8_mm', '6.7_mm', '2.4_mm', '4.9_mm', '8.3_mm', '5.1_mm', '7.6_mm', '9.0_mm', '10.5_mm', '12.8_mm', '14.3_mm', '15.7_mm', '11.2_mm']
tumor_invasion_depth
['Deep_Invasive', 'NR', 'Superficial_Invasion']
Processed 670 columns
tumor_invasion_depth
['1.2_mm', '3.5_mm', '0.8_mm', '4.7_mm', '2.1_mm', '5.3_mm', '6.0_mm', '7.8_mm', '1.5_mm', '2.8_mm', '3.0_mm', '4.2_mm', '5.6_mm', '8.4_mm', '9.1_mm']
tumor_type
['NOS', 'New_Primary', 'Data_Restricted', 'NA', 'NR', 'Pre-cancerous', 'Initial', 'Recurrent', 'Unknown_Status', 'Experimental_Model', 'Unknown_Status', 'Unknown_Status', 'Unknown_Status', 'Pre-cancerous', 'Initial']
tumor_multiplicity
['Multicentric', 'NR', 'Solitary', 'NA', 'NA', 'NA', 'NR', 'Solitary', 'NA', 'Solitary', 'Solitary', 'Solitary', 'Solitary', 'Solitary', 'Solitary']
tumor_classification
['G2', 'G3', 'G4', 'Grade_B', 'Grade_X', 'High', 'Intermediate', 'Low', 'NR', 'Unknown', 'Grade_X', 'Grade_4', 'Low', 'Grade_X', 'Grade_X']
tumor_grade_system
['Grade_4', 'Not_Reported', 'Grade_3']
TIL_density
['Sparse', 'Abundant', 'Intermediate']
TAM_density
['Low', 'High', 'Medium']
max_tumor_diameter_cm
['1.2_cm', '0.8_cm', '3.5_cm', '2.1_cm', '4.7_cm', '5.3_cm', '6.0_cm', '7.2_cm', '8.8_cm', '9.4_cm', '10.5_cm', '11.1_cm', '12.6_cm', '13.8_cm', '15.0_cm']
tumor_size_cm
['2.5_cm', '4.8_cm', '7.1_cm', '3.3_cm', '5.6_cm', '8.9_cm', '1.2_cm', '9.4_cm', '6.7_cm', '0.8_cm', '11.3_cm', '10.1_cm', '12.6_cm', '14.2_cm', '15.8_cm']
prostate_tumor_zone
['Peripheral_zone', 'Transition_zone', 'Central_zone', 'Anterior_fibromuscular_zone', 'Periurethral_zone', 'Apical_zone', 'Basal_zone', 'Mid_zone', 'Anterior_horn', 'Posterior_horn', 'Lateral_horn', 'Medial_horn', 'Superior_zone', 'Inferior_zone', 'Parietal_lobe']
Processed 680 columns
tumor_ploidy_level
['haploid', 'diploid', 'triploid', 'tetraploid', 'pentaploid', 'hexaploid', 'heptaploid', 'octaploid', 'nonaploid', 'decaploid', 'undecaploid', 'dodecaploid', 'tridecaploid', 'tetradecaploid', 'pentadecaploid']
tumor_cellularity
['95%', '85%', '75%', '65%', '55%', '45%', '35%', '25%', '15%', '5%', '90%', '80%', '70%', '60%', '50%']
tumor_response_grade
['0_Complete_Response', '1_Partial_Response', '2_Stable_Disease', '3_Progressive_Disease', 'NR', 'Unknown']
tumor_morphology
['Infiltrative', 'Convex', 'Pedunculated', 'Not_Specified']
tumor_depth_mm
['0.5_mm', '0.8_mm', '1.2_mm', '1.5_mm', '2.0_mm', '2.4_mm', '2.8_mm', '3.1_mm', '3.5_mm', '4.0_mm', '4.5_mm', '5.2_mm', '6.0_mm', '7.3_mm', '8.1_mm']
tumor_diameter_cm
['2.5_cm', '4.8_cm', '1.2_cm', '3.7_cm', '6.0_cm', '0.9_cm', '5.4_cm', '7.2_cm', '2.1_cm', '8.5_cm', '4.3_cm', '9.7_cm', '1.8_cm', '3.3_cm', '10.4_cm']
data_release_type
['publication_version', 'dataset_version', 'release_iteration', 'data_iteration', 'version_release', 'dataset_release', 'publication_iteration', 'version_iteration', 'data_version', 'release_version', 'iteration_release', 'publication_release', 'dataset_iteration', 'version_update']
exposure_type_smoke
['Unintentional_fire_smoke', 'Cooking_fumes', 'Not_Otherwise_Specified', 'Industrial_smoke', 'Cannabis_smoke', 'Petroleum_smoke', 'Cigarette_smoke', 'Not_Specified', 'Garbage_burning_smoke', 'Occupational_smoke_fog_machines', 'Industrial_smoke_plastics']
smoking_type
['Cigarillo', 'Traditional_Cigarette', 'Vape', 'Diverse', 'Water_Pipe', 'Snuff', 'Cigarillo', 'Vape', 'Water_Pipe', 'Cigarillo', 'Vape', 'Cigarillo', 'Diverse', 'Cigarillo', 'Diverse']
metastasis_stage
['M0', 'M1', 'M1a', 'M1b', 'M1c', 'MX', 'NR', 'UK', 'cM0_i_plus', 'M1c', 'UK', 'M1b', 'M1a', 'NR', 'M1b']
Processed 690 columns
clinical_n_stage
['N0_iplus', 'N1', 'N1b', 'N1b_IV', 'N1c', 'N1mi', 'N2b', 'N2c', 'N3c', 'N4', 'N1_mi', 'N1b_IV']
tnm_stage
['Stage_1A', 'Stage_1A1', 'Stage_1A3', 'Stage_2A', 'Stage_2C1', 'Stage_3A', 'Stage_3B', 'Stage_3C', 'Stage_4B', 'Stage_4C']
tnm_tumor_stage
['T0', 'T1a', 'T1c', 'T2b', 'T2c', 'T3a', 'T3d', 'T4', 'T4e', 'DCIS', 'Tis_DCIS']
metastasis_stage
['M0', 'M1', 'M1a', 'M1b', 'M1c', 'M2', 'MX', 'NR', 'UNK', 'cM0_i_plus', 'NA']
clinical_n_stage
['N0', 'N0_molecular_positive', 'N1b1', 'N1c', 'N2', 'N2c', 'N2_microinvasion', 'N3', 'N3b', 'NR', 'N0_mol_pos', 'N1bi']
ajcc_clinical_stage
['Stage_1A', 'Stage_1A1', 'Stage_1B', 'Stage_1B1', 'Stage_2A1', 'Stage_3A1', 'Stage_3C2', 'Stage_4', 'Stage_4B', 'Stage_4C']
pathologic_stage_t
['NR', 'TX', 'T1', 'T1a', 'T1a1', 'T1c2', 'T2b', 'T3c', 'T4', 'T4a', 'TX', 'NR', 'NR', 'TX']
uicc_stage_ed
['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'NR', 'UNK', 'VII', 'VII', 'II', 'VII', 'VI']
ulceration_status
['Absent', 'NR', 'Present']
cryptorchidism_status
['No', 'NR', 'Yes']
Processed 700 columns
cryptorchidism_repair_age_months
['0.5_years', '1_year', '1.5_years', '2_years', '2.5_years', '3_years', '3.5_years', '4_years', '4.5_years', '5_years', '6_years', '7_years', '8_years', '9_years', '10_years']
cryptorchidism_side_corrected
['Bilat', 'Lt', 'NR', 'Rt']
cryptorchidism_treatment_type
['Hormonal_Therapy', 'NR', 'Surgical_Repair', 'Natural_Resolution', 'Orchidectomy']
cryptorchidism_status
['Absent', 'NR', 'Present', 'NR', 'NR', 'NR', 'Present', 'NR', 'Present', 'NR', 'Present', 'Present', 'NR', 'Absent', 'Present']
cryptorchidism_side
['Bilat', 'L', 'NR', 'R']
last_modified_dt
['2023-01-15T14:30Z', '2023-02-03T09:15Z', '2023-03-22T17:45Z', '2023-04-08T12:00Z', '2023-05-19T08:30Z', '2023-06-30T16:20Z', '2023-07-14T10:10Z', '2023-08-05T18:50Z', '2023-09-21T13:35Z', '2023-10-11T15:05Z', '2023-11-02T11:25Z', '2023-12-23T19:40Z', '2024-01-07T20:15Z', '2024-02-17T14:55Z', '2024-03-09T09:45Z']
daily_usage_freq
['none', 'once', 'twice', 'thrice', 'four_times', 'five_times', 'six_times', 'seven_times', 'eight_times', 'nine_times', 'ten_times', 'twelve_times', 'fifteen_times', 'twenty_times', 'twenty_five_times']
mutation_origin
['Germline_variant', 'Acquired_variant', 'Not_specified']
mutation_type
['Allelic_Variants', 'Gene_Conversion', 'Del', 'Delins', 'Ins', 'Inv', 'Loss_of_Function', 'Repeat_Expansions', 'Subst', 'Transloc', 'Gene_Conversion', 'Transloc', 'Inv', 'Del', 'Ins']
vascular_invasion_status
['Absent', 'NR', 'Unknown', 'Present']
Processed 710 columns
vascular_invasion_status
['EMVI', 'IMVI', 'Macrovascular_Invasion', 'Microvascular_Invasion', 'Absent', 'NR', 'Unknown', 'EMVI', 'Macrovascular_Invasion', 'Microvascular_Invasion', 'Absent', 'Unknown', 'IMVI', 'Macrovascular_Invasion', 'EMVI']
hepatitis_viral_markers
['Anti-HBc', 'Hepatitis B Virus DNA', 'HBV Genotype Analysis', 'Anti-HBs', 'HCV Genotype Analysis', 'HBsAg', 'Anti-HCV', 'HCV RNA', 'NR', 'UNK', 'Hepatitis B Virus DNA', 'UNK', 'Hepatitis B Virus DNA', 'HBV Genotype Analysis', 'Hepatitis B Virus DNA']
patient_outcome_status
['Alive', 'Deceased', 'Unreported', 'Unknown', 'LTFU']
gestational_age_weeks
['preterm_early', 'preterm_late', 'term_early', 'term_full', 'term_late', 'postterm']
body_weight_kg
['45.5kg', '68.2kg', '70.1kg', '55.4kg', '82.3kg', '76.8kg', '63.7kg', '89.0kg', '94.5kg', '58.6kg', '102.3kg', '110.5kg', '49.9kg', '73.2kg', '67.8kg']
weiss_criteria
['Nuclear_grade', 'Mitoses_per_50HPF_>5', 'Atypical_mitotic_figures', 'Clear_cell_content_>75%', 'Anomalous_nuclei', 'Diffuse_growth_pattern', 'Tissue_necrosis', 'Vein_invasion', 'Sinusoid_invasion', 'Capsule_invasion', 'Tumor_size_>10cm', 'Tumor_weight_>200g', 'Elevated_mitotic_activity', 'Reticulin_network_loss', 'Cellular_uniformity']
weiss_score
['absent', 'very_low', 'low', 'moderately_low', 'moderate', 'moderately_high', 'high', 'very_high', 'extremely_high', 'maximal']
plate_position
['A1', 'B2', 'C3', 'D4', 'E5', 'F6', 'G7', 'H8', 'I9', 'J10', 'K11', 'L12', 'M13', 'N14', 'O15']
genome_seq_depth
['no_coverage', 'low_coverage', 'high_coverage', 'very_high_coverage', 'NA', 'unknown']
cns_grade_classification
['G1', 'G2', 'G3', 'G4', 'Grade_Unassigned', 'NR', 'Unknown', 'G2', 'G1', 'Unknown', 'NR', 'NR', 'G2', 'G2']
Processed 720 columns
tumor_grade
['G1', 'G2', 'G3', 'Grade_X', 'NR', 'Unknown']
wilms_tumor_grade
['Favorable_Histology', 'NR', 'Anaplastic', 'NA', 'NR', 'Anaplastic', 'NR', 'Anaplastic', 'Favorable_Histology', 'NA', 'Anaplastic', 'Favorable_Histology', 'NA', 'Anaplastic', 'NR']
workflow_completion_dt
['2023-07-15T14:30Z', '2023-08-22T09:45Z', '2023-09-05T16:15Z', '2023-10-10T11:00Z', '2023-11-02T18:30Z', '2023-12-20T07:45Z', '2024-01-15T13:30Z', '2024-02-25T10:15Z', '2024-03-30T19:00Z', '2024-04-18T08:30Z', '2024-05-22T15:45Z', '2024-06-12T12:00Z', '2024-07-27T20:15Z', '2024-08-09T09:00Z', '2024-09-03T17:30Z']
workflow_repo_url
['https://github.com/cancer-genomics/workflow_v1/commit/a1b2c3d4e5', 'https://github.com/genome-research/workflow_v2/commit/f6g7h8i9j0', 'https://github.com/precision-oncology/workflow_v3/commit/k1l2m3n4o5', 'https://github.com/bioinformatics-tools/workflow_v4/commit/p6q7r8s9t0', 'https://github.com/clinical-genomics/workflow_v5/commit/u1v2w3x4y5', 'https://github.com/cancer-analysis/workflow_v6/commit/z6a7b8c9d0', 'https://github.com/molecular-diagnostics/workflow_v7/commit/e1f2g3h4i5', 'https://github.com/cancer-therapy/workflow_v8/commit/j6k7l8m9n0', 'https://github.com/genomic-data-analysis/workflow_v9/commit/o1p2q3r4s5', 'https://github.com/targeted-therapy/workflow_v10/commit/t6u7v8w9x0', 'https://github.com/cancer-immunotherapy/workflow_v11/commit/y1z2a3b4c5', 'https://github.com/rna-sequencing/workflow_v12/commit/d6e7f8g9h0', 'https://github.com/protein-analysis/workflow_v13/commit/i1j2k3l4m5', 'https://github.com/cell-signaling/workflow_v14/commit/n6o7p8q9r0', 'https://github.com/mutation-analysis/workflow_v15/commit/s1t2u3v4w5']
process_initiation_timestamp
['2023-01-15T08:30Z', '2023-02-20T09:45Z', '2023-03-10T14:00Z', '2023-04-05T16:30Z', '2023-05-25T11:15Z', '2023-06-30T13:45Z', '2023-07-22T10:00Z', '2023-08-18T15:30Z', '2023-09-05T09:00Z', '2023-10-13T14:15Z', '2023-11-02T08:45Z', '2023-12-07T16:00Z', '2023-01-28T10:30Z', '2023-02-15T15:45Z', '2023-03-23T12:30Z']
analysis_method
['ABSOLUTE_LiftOver', 'Ascat_NGS', 'miRNA_Sequencing', 'CNV_Analysis', 'GISTIC2_Focal_Deletion', 'Gene_Expression_Counts', 'Structural_Variant_Aggregation', 'Quality_Control', 'RNA_Seq_Counts', 'Variant_Calling']
pipeline_version
['v1.0.0', 'v1.2.1', 'v2.0.0', 'v2.5.3', 'v3.0.0', 'v3.1.4', 'v4.0.0', 'v4.2.0', 'v5.0.0', 'v5.3.2', 'v6.0.0', 'v6.1.1', 'v7.0.0', 'v7.4.5', 'v8.0.0']
birth_year
['MCMII', 'MCMVI', 'MCMX', 'MCMXIV', 'MCMXVIII', 'MCMXXII', 'MCMXXVI', 'MCMXXX', 'MCMXXXIV', 'MCMXXXVIII', 'MCMXLII', 'MCMXLVI', 'MCML', 'MCMLIV', 'MCMLVIII']
death_year
['Y2015', 'Y2016', 'Y2017', 'Y2018', 'Y2019', 'Y2020', 'Y2021', 'Y2022', 'Y2023', 'Y2024', 'Y2025', 'Y2026', 'Y2027', 'Y2028', 'Y2029']
diagnosis_year
['Y2005', 'Y2006', 'Y2007', 'Y2008', 'Y2009', 'Y2010', 'Y2011', 'Y2012', 'Y2013', 'Y2014', 'Y2015', 'Y2016', 'Y2017', 'Y2018', 'Y2019']
Processed 730 columns
follow_up_duration_yrs
['Y1', 'Y2', 'Y3', 'Y4', 'Y5', 'Y6', 'Y7', 'Y8', 'Y9', 'Y10', 'Y11', 'Y12', 'Y13', 'Y14', 'Y15']
smoking_duration_years
['0', '1', '2', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', 'NA']
prostate_zone_origin
['CZ', 'OMZ', 'PZ', 'TZ', 'UZ']
allele_status
['Hemizyg', 'Heterozyg', 'Homozyg', 'NR', 'Nullizyg', 'Unk']
Done.
